{
  "stats": {
    "suites": 26,
    "tests": 53,
    "passes": 53,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-03T11:57:28.411Z",
    "end": "2018-05-03T11:57:28.499Z",
    "duration": 88,
    "testsRegistered": 53,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "7f83af6a-c6a0-4f08-ba90-ac2616d4cf70",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 2,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "server.listen(port)",
        "err": {},
        "isRoot": true,
        "uuid": "7e8a20eb-f924-476d-ae97-12ae0ff320ac",
        "isHook": true,
        "skipped": false
      }
    ],
    "afterHooks": [
      {
        "title": "\"after all\" hook",
        "fullTitle": "\"after all\" hook",
        "timedOut": false,
        "duration": 0,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "server.close()",
        "err": {},
        "isRoot": true,
        "uuid": "504d295c-fa71-444b-9f7b-1770a372d593",
        "isHook": true,
        "skipped": false
      }
    ],
    "tests": [
      {
        "title": "integration test of fetching a public resource",
        "fullTitle": "integration test of fetching a public resource",
        "timedOut": false,
        "duration": 15,
        "state": "passed",
        "speed": "fast",
        "pass": true,
        "fail": false,
        "pending": false,
        "code": "const result = await request.get('/resource/master.css')\nexpect(result.status).to.be.equal(200)\nexpect(result.headers['content-type']).to.be.equal('text/css')\nexpect(result.data.includes('margin: 0')).to.be.equal(true)",
        "err": {},
        "isRoot": true,
        "uuid": "c995650e-73a5-49db-bc17-9eb8f9b18a27",
        "isHook": false,
        "skipped": false
      },
      {
        "title": "integration test of the rest dispatcher",
        "fullTitle": "integration test of the rest dispatcher",
        "timedOut": false,
        "duration": 6,
        "state": "passed",
        "speed": "fast",
        "pass": true,
        "fail": false,
        "pending": false,
        "code": "const result =\n{\n  get     : await request.get('/rest'),\n  post    : await request.post('/rest'),\n  put     : await request.put('/rest'),\n  delete  : await request.delete('/rest'),\n  index   : await request.fetch('index', '/rest')\n}\nexpect(result.get.status).to.be.equal(501)\nexpect(result.post.status).to.be.equal(501)\nexpect(result.put.status).to.be.equal(501)\nexpect(result.delete.status).to.be.equal(501)\nexpect(result.index.status).to.be.equal(400)",
        "err": {},
        "isRoot": true,
        "uuid": "1be24872-9fa8-4cbb-b1a3-c52d43b3a4f6",
        "isHook": false,
        "skipped": false
      },
      {
        "title": "integration test of a raw text response",
        "fullTitle": "integration test of a raw text response",
        "timedOut": false,
        "duration": 1,
        "state": "passed",
        "speed": "fast",
        "pass": true,
        "fail": false,
        "pending": false,
        "code": "const result = await request.get('/test-raw')\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('txt')",
        "err": {},
        "isRoot": true,
        "uuid": "898e2b11-55de-4857-bfe2-24de7830649b",
        "isHook": false,
        "skipped": false
      },
      {
        "title": "integration test of a json response",
        "fullTitle": "integration test of a json response",
        "timedOut": false,
        "duration": 2,
        "state": "passed",
        "speed": "fast",
        "pass": true,
        "fail": false,
        "pending": false,
        "code": "const result = await request.get('/test-json')\nexpect(result.status).to.be.equal(200)\nexpect(result.data.foobar).to.be.equal('bazqux')",
        "err": {},
        "isRoot": true,
        "uuid": "858ba6ce-8ada-45bf-ae50-80b5fddeb94c",
        "isHook": false,
        "skipped": false
      },
      {
        "title": "integration test of a templated response",
        "fullTitle": "integration test of a templated response",
        "timedOut": false,
        "duration": 16,
        "state": "passed",
        "speed": "fast",
        "pass": true,
        "fail": false,
        "pending": false,
        "code": "const result = await request.get('/test-templated')\nexpect(result.status).to.be.equal(200)\nexpect(result.data.startsWith('layout')).to.be.equal(true)\nexpect(result.data.includes('titled')).to.be.equal(true)\nexpect(result.data.includes('bazqux')).to.be.equal(true)",
        "err": {},
        "isRoot": true,
        "uuid": "a5201dfd-b44d-4573-8916-3d3d81eda59a",
        "isHook": false,
        "skipped": false
      },
      {
        "title": "integration test of the if helper",
        "fullTitle": "integration test of the if helper",
        "timedOut": false,
        "duration": 5,
        "state": "passed",
        "speed": "fast",
        "pass": true,
        "fail": false,
        "pending": false,
        "code": "const result = await request.get('/test-templated')\n// testing the \"if\" helper in the template\nexpect(result.data.includes('==')).to.be.equal(true)\nexpect(result.data.includes('!=')).to.be.equal(true)\nexpect(result.data.includes('<' )).to.be.equal(true)\nexpect(result.data.includes('<=')).to.be.equal(true)\nexpect(result.data.includes('>' )).to.be.equal(true)\nexpect(result.data.includes('>=')).to.be.equal(true)\nexpect(result.data.includes('&&')).to.be.equal(true)\nexpect(result.data.includes('||')).to.be.equal(true)\nexpect(result.data.includes('typeof')).to.be.equal(true)",
        "err": {},
        "isRoot": true,
        "uuid": "e4d5a7e4-789a-43e5-a1d7-34562055d5a3",
        "isHook": false,
        "skipped": false
      },
      {
        "title": "integration test of a none specified dispatcher should ",
        "fullTitle": "integration test of a none specified dispatcher should ",
        "timedOut": false,
        "duration": 1,
        "state": "passed",
        "speed": "fast",
        "pass": true,
        "fail": false,
        "pending": false,
        "code": "const result = await request.get('/test-501')\nexpect(result.status).to.be.equal(501)\nexpect(result.data).to.be.equal('Not Implemented')",
        "err": {},
        "isRoot": true,
        "uuid": "e8d615e1-fb51-4cd7-b8a9-fbf263a5853a",
        "isHook": false,
        "skipped": false
      },
      {
        "title": "integration test of a failing dispatcher",
        "fullTitle": "integration test of a failing dispatcher",
        "timedOut": false,
        "duration": 2,
        "state": "passed",
        "speed": "fast",
        "pass": true,
        "fail": false,
        "pending": false,
        "code": "const result = await request.get('/test-failing')\nexpect(result.status).to.be.equal(500)\nexpect(result.data).to.be.equal('Internal Server Error')",
        "err": {},
        "isRoot": true,
        "uuid": "65f66f2e-ed72-4ba7-9797-2ac543307bfd",
        "isHook": false,
        "skipped": false
      },
      {
        "title": "integration test of a none specified route returns a 404",
        "fullTitle": "integration test of a none specified route returns a 404",
        "timedOut": false,
        "duration": 1,
        "state": "passed",
        "speed": "fast",
        "pass": true,
        "fail": false,
        "pending": false,
        "context": "{\n  \"title\": \"config\",\n  \"value\": [\n    {\n      \"middleware\": \"/middle-1\"\n    },\n    {\n      \"view\": \"json\"\n    },\n    {\n      \"policy\": \"/\",\n      \"dispatcher\": \"index\",\n      \"middleware\": \"/middle-2\"\n    },\n    {\n      \"view\": \"raw\",\n      \"policy\": \"/foo\",\n      \"dispatcher\": \"foo\"\n    },\n    {\n      \"dispatcher\": \"baz\",\n      \"policy\": {\n        \"method\": \"post\",\n        \"path\": \"/bar\"\n      }\n    },\n    {\n      \"policy\": \"/bar\",\n      \"dispatcher\": \"bar\",\n      \"middleware\": [\n        \"/middle-2\",\n        \"/middle-3\"\n      ]\n    }\n  ]\n}",
        "code": "const result = await request.get('/none-existing-path')\nexpect(result.status).to.be.equal(404)\nexpect(result.data).to.be.equal('Not Found')",
        "err": {},
        "isRoot": true,
        "uuid": "cd79ff0e-5ec3-4501-aaed-ec88d771cd22",
        "isHook": false,
        "skipped": false
      }
    ],
    "suites": [
      {
        "uuid": "76da3288-3bd6-4c9d-9de1-40f5b6d4971f",
        "title": "controller/server/http/router",
        "fullFile": "/home/erik/Projects/@superhero/js.core/controller/server/http/router.test.js",
        "file": "/controller/server/http/router.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1cf479e9-8b70-438a-ba6a-8c421fe1306d",
            "title": "flattenRoutes(routes)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/controller/server/http/router.test.js",
            "file": "/controller/server/http/router.test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "controller/server/http/router flattenRoutes(routes) \"before all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "context(this, { title:'config', value:config })\nrouter = new Router(config)",
                "err": {},
                "isRoot": false,
                "uuid": "348ac939-ab7b-4a5d-84a0-010aab93cf3d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a flatten route",
                "fullTitle": "controller/server/http/router flattenRoutes(routes) should return a flatten route",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"config\",\n  \"value\": [\n    {\n      \"middleware\": \"/middle-1\"\n    },\n    {\n      \"view\": \"json\"\n    },\n    {\n      \"policy\": \"/\",\n      \"dispatcher\": \"index\",\n      \"middleware\": \"/middle-2\"\n    },\n    {\n      \"view\": \"raw\",\n      \"policy\": \"/foo\",\n      \"dispatcher\": \"foo\"\n    },\n    {\n      \"dispatcher\": \"baz\",\n      \"policy\": {\n        \"method\": \"post\",\n        \"path\": \"/bar\"\n      }\n    },\n    {\n      \"policy\": \"/bar\",\n      \"dispatcher\": \"bar\",\n      \"middleware\": [\n        \"/middle-2\",\n        \"/middle-3\"\n      ]\n    }\n  ]\n}",
                "code": "context(this, { title:'config', value:config })\nconst route = router.flattenRoutes(config)\nexpect(route.view).to.be.equal('json')\nexpect(route.policy).to.be.equal('/')\nexpect(route.dispatcher).to.be.equal('index')\nexpect(route.middleware.length).to.be.equal(2)",
                "err": {},
                "isRoot": false,
                "uuid": "e617b6b3-a802-4544-8433-d60c9f3023fa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e617b6b3-a802-4544-8433-d60c9f3023fa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "068b1c27-e5fd-4bec-966f-27f898fff59c",
            "title": "findRoute(request)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/controller/server/http/router.test.js",
            "file": "/controller/server/http/router.test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "controller/server/http/router findRoute(request) \"before all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"config\",\n  \"value\": [\n    {\n      \"middleware\": \"/middle-1\"\n    },\n    {\n      \"view\": \"json\"\n    },\n    {\n      \"policy\": \"/\",\n      \"dispatcher\": \"index\",\n      \"middleware\": \"/middle-2\"\n    },\n    {\n      \"view\": \"raw\",\n      \"policy\": \"/foo\",\n      \"dispatcher\": \"foo\"\n    },\n    {\n      \"dispatcher\": \"baz\",\n      \"policy\": {\n        \"method\": \"post\",\n        \"path\": \"/bar\"\n      }\n    },\n    {\n      \"policy\": \"/bar\",\n      \"dispatcher\": \"bar\",\n      \"middleware\": [\n        \"/middle-2\",\n        \"/middle-3\"\n      ]\n    }\n  ]\n}",
                "code": "context(this, { title:'config', value:config })\nrouter  = new Router(config)\nresult1 = router.findRoute({ url:{ pathname:'/' }})\nresult2 = router.findRoute({ url:{ pathname:'/foo' }})\nresult3 = router.findRoute({ url:{ pathname:'/bar' }, method:'get'})\nresult4 = router.findRoute({ url:{ pathname:'/bar' }, method:'post'})\nresult5 = router.findRoute({ url:{ pathname:'/no-matching-pathname' }})",
                "err": {},
                "isRoot": false,
                "uuid": "eec2cf3b-124d-4dc9-8758-7efd536fa258",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "middleware is an array",
                "fullTitle": "controller/server/http/router findRoute(request) middleware is an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result1.middleware).is.an('array')",
                "err": {},
                "isRoot": false,
                "uuid": "c3493132-f209-4813-898e-6be1149f33e5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "middleware builds on",
                "fullTitle": "controller/server/http/router findRoute(request) middleware builds on",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result1.middleware.length).to.be.equal(2)",
                "err": {},
                "isRoot": false,
                "uuid": "e9487dd9-0925-4fb5-9470-7c63dca4424e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "middleware routes correctly",
                "fullTitle": "controller/server/http/router findRoute(request) middleware routes correctly",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result2.middleware.length).to.be.equal(1)",
                "err": {},
                "isRoot": false,
                "uuid": "829c4bf8-23ac-4dc5-a70e-f32a51874438",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "middleware can be defined as an array",
                "fullTitle": "controller/server/http/router findRoute(request) middleware can be defined as an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result3.middleware.length).to.be.equal(3)",
                "err": {},
                "isRoot": false,
                "uuid": "864426ae-f25e-4dc2-a7a2-8cc7ce211e9d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "view is inherited",
                "fullTitle": "controller/server/http/router findRoute(request) view is inherited",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result1.view).to.be.equal('json')",
                "err": {},
                "isRoot": false,
                "uuid": "eb4e58f5-eaa2-412e-886f-39963d487318",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "found correct dispatcher ",
                "fullTitle": "controller/server/http/router findRoute(request) found correct dispatcher ",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result1.dispatcher).to.be.equal('index')",
                "err": {},
                "isRoot": false,
                "uuid": "d5b40777-4954-4dbf-bf50-aba942789b71",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "overwrite the view",
                "fullTitle": "controller/server/http/router findRoute(request) overwrite the view",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result2.view).to.be.equal('raw')",
                "err": {},
                "isRoot": false,
                "uuid": "26c96250-3c6d-4eab-aebd-63204eadfa3f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "first match should have hierarchy",
                "fullTitle": "controller/server/http/router findRoute(request) first match should have hierarchy",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result3.dispatcher).to.be.equal('bar')",
                "err": {},
                "isRoot": false,
                "uuid": "530e4ba3-805e-46f0-ba64-4e70171a43d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method policy routes correctly",
                "fullTitle": "controller/server/http/router findRoute(request) method policy routes correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result4.dispatcher).to.be.equal('baz')",
                "err": {},
                "isRoot": false,
                "uuid": "2c2f9ef9-40ab-46a0-b7e5-a768ac4a2e79",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "no match should return an undefined dispatcher",
                "fullTitle": "controller/server/http/router findRoute(request) no match should return an undefined dispatcher",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result5.dispatcher).to.be.equal(undefined)",
                "err": {},
                "isRoot": false,
                "uuid": "d225cd60-1dbf-4958-a667-bc500a372f5f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c3493132-f209-4813-898e-6be1149f33e5",
              "e9487dd9-0925-4fb5-9470-7c63dca4424e",
              "829c4bf8-23ac-4dc5-a70e-f32a51874438",
              "864426ae-f25e-4dc2-a7a2-8cc7ce211e9d",
              "eb4e58f5-eaa2-412e-886f-39963d487318",
              "d5b40777-4954-4dbf-bf50-aba942789b71",
              "26c96250-3c6d-4eab-aebd-63204eadfa3f",
              "530e4ba3-805e-46f0-ba64-4e70171a43d1",
              "2c2f9ef9-40ab-46a0-b7e5-a768ac4a2e79",
              "d225cd60-1dbf-4958-a667-bc500a372f5f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2f57501f-0f28-408c-89ca-1b4bf58a2345",
        "title": "controller/server/ws/router",
        "fullFile": "/home/erik/Projects/@superhero/js.core/controller/server/ws/router.test.js",
        "file": "/controller/server/ws/router.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cfed591c-b02f-4081-a951-8d29c60ad02e",
            "title": "findRoute(request)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/controller/server/ws/router.test.js",
            "file": "/controller/server/ws/router.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "correct dispatcher found",
                "fullTitle": "controller/server/ws/router findRoute(request) correct dispatcher found",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result1.dispatcher).to.be.equal('foo')",
                "err": {},
                "isRoot": false,
                "uuid": "046ff569-fe43-4155-b706-e4a4c40cd5b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "regex policy",
                "fullTitle": "controller/server/ws/router findRoute(request) regex policy",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result2.dispatcher).to.be.equal('baz')",
                "err": {},
                "isRoot": false,
                "uuid": "82b9311f-95e0-4ff4-85b3-eb02de20dceb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "no matching policy should return an undefined dispatcher",
                "fullTitle": "controller/server/ws/router findRoute(request) no matching policy should return an undefined dispatcher",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result3.dispatcher).to.be.equal(undefined)",
                "err": {},
                "isRoot": false,
                "uuid": "c4a617a3-72f4-4f49-a9d9-a9604ad5ec20",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "046ff569-fe43-4155-b706-e4a4c40cd5b3",
              "82b9311f-95e0-4ff4-85b3-eb02de20dceb",
              "c4a617a3-72f4-4f49-a9d9-a9604ad5ec20"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "52bafdee-a07c-4396-ab3a-c2bc710b8ecb",
        "title": "error/context",
        "fullFile": "/home/erik/Projects/@superhero/js.core/error/context.test.js",
        "file": "/error/context.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f6aad0ed-e3a2-4bbb-8f6e-96fbbee86de1",
            "title": "setCode(code)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/error/context.test.js",
            "file": "/error/context.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to retrieve the error code set through `setCode`",
                "fullTitle": "error/context setCode(code) should be able to retrieve the error code set through `setCode`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const code = 'ERR_VALUE_OUT_OF_RANGE'\nerror.setCode(code)\nexpect(error.code).to.be.equal(code)",
                "err": {},
                "isRoot": false,
                "uuid": "14f53afe-8585-49e6-a4b3-24aca132189f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "14f53afe-8585-49e6-a4b3-24aca132189f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f537f300-368d-44b4-bec7-ab992b6d91ca",
            "title": "setContext(ctx)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/error/context.test.js",
            "file": "/error/context.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to retrieve the context set through `setContext`",
                "fullTitle": "error/context setContext(ctx) should be able to retrieve the context set through `setContext`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const ctx = { foo:'bar' }\nerror.setContext(ctx)\nexpect(error.context).to.deep.equal(ctx)",
                "err": {},
                "isRoot": false,
                "uuid": "75eb8250-1c95-45b0-bad5-464ad5d6ab8b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "75eb8250-1c95-45b0-bad5-464ad5d6ab8b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "18fa7628-05d0-4d66-978b-638a49702951",
        "title": "error/index",
        "fullFile": "/home/erik/Projects/@superhero/js.core/error/index.test.js",
        "file": "/error/index.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "78bbd40a-b1c8-4db1-a437-c86732032b9f",
            "title": "setCode(code)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/error/index.test.js",
            "file": "/error/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to retrieve the error code set through `setCode`",
                "fullTitle": "error/index setCode(code) should be able to retrieve the error code set through `setCode`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const code = 'ERR_VALUE_OUT_OF_RANGE'\nerror.setCode(code)\nexpect(error.code).to.be.equal(code)",
                "err": {},
                "isRoot": false,
                "uuid": "81644fb1-3967-4bb4-a969-232e01004670",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "81644fb1-3967-4bb4-a969-232e01004670"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d3c51974-cc33-4945-93b0-65ff29de3bcf",
        "title": "view/json",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/json.test.js",
        "file": "/view/json.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "be45e05a-59bb-4c45-a307-3a7de514642c",
            "title": "compose(vm)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/view/json.test.js",
            "file": "/view/json.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a stringified value of `vm.body`",
                "fullTitle": "view/json compose(vm) should return a stringified value of `vm.body`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(json.compose(vm1)).to.be.equal(JSON.stringify(vm1.body))",
                "err": {},
                "isRoot": false,
                "uuid": "78fad131-341c-4d0a-a987-f4f692ad9974",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set the `vm.headers[\"content-type\"]` to \"application/json\"",
                "fullTitle": "view/json compose(vm) should set the `vm.headers[\"content-type\"]` to \"application/json\"",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(vm1.headers['content-type']).to.be.equal('application/json')",
                "err": {},
                "isRoot": false,
                "uuid": "c679b354-1a66-4462-b100-60b1cc49f747",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "headers set`",
                "fullTitle": "view/json compose(vm) headers set`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(json.compose(vm2)).to.be.equal(JSON.stringify(vm2.body))",
                "err": {},
                "isRoot": false,
                "uuid": "0fb10c0c-3332-4858-bb5f-c972cebd7800",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "78fad131-341c-4d0a-a987-f4f692ad9974",
              "c679b354-1a66-4462-b100-60b1cc49f747",
              "0fb10c0c-3332-4858-bb5f-c972cebd7800"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c44b6e3d-2316-417c-b257-8ab6f032e46b",
        "title": "view/raw",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/raw.test.js",
        "file": "/view/raw.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c02c9644-2da1-4e8a-a8d7-00bdbf5ccd4e",
            "title": "compose(vm)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/view/raw.test.js",
            "file": "/view/raw.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the value of `vm.body`",
                "fullTitle": "view/raw compose(vm) should return the value of `vm.body`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(raw.compose(vm)).to.be.equal(vm.body)",
                "err": {},
                "isRoot": false,
                "uuid": "770c474d-84c2-48ef-8475-007f1992c3cd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "770c474d-84c2-48ef-8475-007f1992c3cd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "80ec3744-a6ed-4e3b-87e0-fe7aa2f5cd70",
        "title": "view/template",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template.test.js",
        "file": "/view/template.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "532766e3-719d-4d9d-bd6d-2016085e1e59",
            "title": "static get handlebars",
            "fullFile": "/home/erik/Projects/@superhero/js.core/view/template.test.js",
            "file": "/view/template.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the handlebars instance",
                "fullTitle": "view/template static get handlebars should return the handlebars instance",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(Template.handlebars).to.be.equal(require('handlebars'))",
                "err": {},
                "isRoot": false,
                "uuid": "cee39325-8789-4fec-ab50-c149f6648ccf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cee39325-8789-4fec-ab50-c149f6648ccf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f71c654b-d20a-4cc1-8eea-a2388be4904c",
        "title": "view/template/helper/calculate",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/calculate.test.js",
        "file": "/view/template/helper/calculate.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "1 + 1 = 2",
            "fullTitle": "view/template/helper/calculate 1 + 1 = 2",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(calculate(1, '+', 1)).to.be.equal(2)",
            "err": {},
            "isRoot": false,
            "uuid": "5b6d688f-cc07-46c9-b25c-f12298efa045",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "4 - 2 = 2",
            "fullTitle": "view/template/helper/calculate 4 - 2 = 2",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(calculate(4, '-', 2)).to.be.equal(2)",
            "err": {},
            "isRoot": false,
            "uuid": "837b6be4-175b-4b1e-849c-1fcc1c157cb2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "3 * 3 = 9",
            "fullTitle": "view/template/helper/calculate 3 * 3 = 9",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(calculate(3, '*', 3)).to.be.equal(9)",
            "err": {},
            "isRoot": false,
            "uuid": "611022b8-5e5f-402e-b3de-e9bd141df0ac",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "9 / 3 = 3",
            "fullTitle": "view/template/helper/calculate 9 / 3 = 3",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(calculate(9, '/', 3)).to.be.equal(3)",
            "err": {},
            "isRoot": false,
            "uuid": "89e7640f-e452-4197-807c-e132a9f62ce7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "5 % 3 = 2",
            "fullTitle": "view/template/helper/calculate 5 % 3 = 2",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(calculate(5, '%', 3)).to.be.equal(2)",
            "err": {},
            "isRoot": false,
            "uuid": "87955e65-37e1-442b-b181-e84a2880364c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "empty operator should return an empty string",
            "fullTitle": "view/template/helper/calculate empty operator should return an empty string",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(calculate(1, '', 1)).to.be.equal('')",
            "err": {},
            "isRoot": false,
            "uuid": "39129bcc-4902-45cb-bb7d-be2c471ad951",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5b6d688f-cc07-46c9-b25c-f12298efa045",
          "837b6be4-175b-4b1e-849c-1fcc1c157cb2",
          "611022b8-5e5f-402e-b3de-e9bd141df0ac",
          "89e7640f-e452-4197-807c-e132a9f62ce7",
          "87955e65-37e1-442b-b181-e84a2880364c",
          "39129bcc-4902-45cb-bb7d-be2c471ad951"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "52ecf58f-431c-48ad-afef-28140b03de6c",
        "title": "view/template/helper/concat",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/concat.test.js",
        "file": "/view/template/helper/concat.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a concatted string",
            "fullTitle": "view/template/helper/concat should return a concatted string",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(concat('foo','bar','baz')).to.be.equal('foobarbaz')",
            "err": {},
            "isRoot": false,
            "uuid": "845e1487-59ad-4d3c-b062-e96f6fce9574",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should ignore objects or undefined arguments when concatting",
            "fullTitle": "view/template/helper/concat should ignore objects or undefined arguments when concatting",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(concat('foo', undefined, {}, 'bar')).to.be.equal('foobar')",
            "err": {},
            "isRoot": false,
            "uuid": "b864c947-b53d-4291-895d-bbe28a8bb9e0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "845e1487-59ad-4d3c-b062-e96f6fce9574",
          "b864c947-b53d-4291-895d-bbe28a8bb9e0"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3a1e4f0f-0730-4309-bfc5-234349638364",
        "title": "view/template/helper/dateformat",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/dateformat.test.js",
        "file": "/view/template/helper/dateformat.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a formated date string",
            "fullTitle": "view/template/helper/dateformat should return a formated date string",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(dateformat(new Date(1524493378898), 'yyyy')).to.be.equal('2018')",
            "err": {},
            "isRoot": false,
            "uuid": "7d370643-16e0-48fd-ba47-156c43f0545a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "7d370643-16e0-48fd-ba47-156c43f0545a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4ffff859-6fcc-409f-9fc3-078094dcda91",
        "title": "view/template/helper/escDoubleQuote",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/escDoubleQuote.test.js",
        "file": "/view/template/helper/escDoubleQuote.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a string with escaped double quotes",
            "fullTitle": "view/template/helper/escDoubleQuote should return a string with escaped double quotes",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(escDoubleQuote('foo \"bar\"')).to.be.equal('foo \\\\\"bar\\\\\"')",
            "err": {},
            "isRoot": false,
            "uuid": "3ead24f1-b230-49a7-8ae0-13799c993e16",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "3ead24f1-b230-49a7-8ae0-13799c993e16"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f095c7ba-6d2b-4df9-bd19-28c2eb7c0a8c",
        "title": "view/template/helper/escSingelQuote",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/escSingelQuote.test.js",
        "file": "/view/template/helper/escSingelQuote.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a string with escaped singel quotes",
            "fullTitle": "view/template/helper/escSingelQuote should return a string with escaped singel quotes",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(escSingelQuote(\"foo 'bar'\")).to.be.equal(\"foo \\\\'bar\\\\'\")",
            "err": {},
            "isRoot": false,
            "uuid": "9a2e5274-3be3-47ed-93fb-fc1f9f137e54",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "9a2e5274-3be3-47ed-93fb-fc1f9f137e54"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "703757ce-b555-460c-965c-6febb1e64f06",
        "title": "view/template/helper/jsonStringify",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/jsonStringify.test.js",
        "file": "/view/template/helper/jsonStringify.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a stringified json object",
            "fullTitle": "view/template/helper/jsonStringify should return a stringified json object",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(jsonStringify({foo:'bar'})).to.be.equal('{\"foo\":\"bar\"}')",
            "err": {},
            "isRoot": false,
            "uuid": "68d9b9de-5972-486c-a815-bb91b45eba5b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "68d9b9de-5972-486c-a815-bb91b45eba5b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c17e6650-43e4-430b-802a-df055aac42f8",
        "title": "view/template/helper/stripTags",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/stripTags.test.js",
        "file": "/view/template/helper/stripTags.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a string stripped of html tags",
            "fullTitle": "view/template/helper/stripTags should return a string stripped of html tags",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(stripTags('<p>foobar</p>')).to.be.equal('foobar')",
            "err": {},
            "isRoot": false,
            "uuid": "df8a31c1-4c99-4810-aca2-772398767fda",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a number if a number was given",
            "fullTitle": "view/template/helper/stripTags should return a number if a number was given",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(stripTags(5)).to.be.equal(5)",
            "err": {},
            "isRoot": false,
            "uuid": "b2341058-ac68-46f9-9e31-07fc296e52a3",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "df8a31c1-4c99-4810-aca2-772398767fda",
          "b2341058-ac68-46f9-9e31-07fc296e52a3"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "08d94f8e-9c8c-425e-86ab-0f21ded0afcd",
        "title": "view/template/helper/toFixed",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/toFixed.test.js",
        "file": "/view/template/helper/toFixed.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a padded number",
            "fullTitle": "view/template/helper/toFixed should return a padded number",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(toFixed(5, 2)).to.be.equal('5.00')",
            "err": {},
            "isRoot": false,
            "uuid": "8d55044c-aaab-42b9-8c68-43151805899a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to handle \"null\"",
            "fullTitle": "view/template/helper/toFixed should be able to handle \"null\"",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(toFixed(null, 2)).to.be.equal('0.00')",
            "err": {},
            "isRoot": false,
            "uuid": "aa70c7b9-332d-40fd-891b-93cfa1995e9c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return NaN if \"undefined\" is spcified",
            "fullTitle": "view/template/helper/toFixed should return NaN if \"undefined\" is spcified",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(toFixed(undefined, 2)).to.be.equal('NaN')",
            "err": {},
            "isRoot": false,
            "uuid": "4e6a8b38-caf3-45ab-a3fc-543ae9a66cf7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to handle negative numbers",
            "fullTitle": "view/template/helper/toFixed should be able to handle negative numbers",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(toFixed(-5, 2)).to.be.equal('-5.00')",
            "err": {},
            "isRoot": false,
            "uuid": "212a5a29-6ff5-416a-aa8b-622fc43fb8e1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to handle strings",
            "fullTitle": "view/template/helper/toFixed should be able to handle strings",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(toFixed('5', 2)).to.be.equal('5.00')",
            "err": {},
            "isRoot": false,
            "uuid": "2ed31d9a-8def-4ff4-bc22-1ca97901ca39",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to handle strings that is not formatted as a number",
            "fullTitle": "view/template/helper/toFixed should be able to handle strings that is not formatted as a number",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(toFixed('foobar', 2)).to.be.equal('NaN')",
            "err": {},
            "isRoot": false,
            "uuid": "c42714b9-9239-4e20-93d5-933ebc71c786",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "8d55044c-aaab-42b9-8c68-43151805899a",
          "aa70c7b9-332d-40fd-891b-93cfa1995e9c",
          "4e6a8b38-caf3-45ab-a3fc-543ae9a66cf7",
          "212a5a29-6ff5-416a-aa8b-622fc43fb8e1",
          "2ed31d9a-8def-4ff4-bc22-1ca97901ca39",
          "c42714b9-9239-4e20-93d5-933ebc71c786"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0991af9c-54af-45e0-9ab2-7b4ce80192e1",
        "title": "view/template/helper/toLowerCase",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/toLowerCase.test.js",
        "file": "/view/template/helper/toLowerCase.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return an uppercase string",
            "fullTitle": "view/template/helper/toLowerCase should return an uppercase string",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(toLowerCase('FooBar')).to.be.equal('foobar')",
            "err": {},
            "isRoot": false,
            "uuid": "4c1b9175-cd98-43e2-854e-571feb992731",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4c1b9175-cd98-43e2-854e-571feb992731"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8aa0da01-08f5-4676-a1c2-00aae99b6d66",
        "title": "view/template/helper/toUpperCase",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/toUpperCase.test.js",
        "file": "/view/template/helper/toUpperCase.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return an uppercase string",
            "fullTitle": "view/template/helper/toUpperCase should return an uppercase string",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(toUpperCase('Foobar')).to.be.equal('FOOBAR')",
            "err": {},
            "isRoot": false,
            "uuid": "66915701-74f8-4788-8d29-3b510a83c6e8",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "66915701-74f8-4788-8d29-3b510a83c6e8"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [
      "c995650e-73a5-49db-bc17-9eb8f9b18a27",
      "1be24872-9fa8-4cbb-b1a3-c52d43b3a4f6",
      "898e2b11-55de-4857-bfe2-24de7830649b",
      "858ba6ce-8ada-45bf-ae50-80b5fddeb94c",
      "a5201dfd-b44d-4573-8916-3d3d81eda59a",
      "e4d5a7e4-789a-43e5-a1d7-34562055d5a3",
      "e8d615e1-fb51-4cd7-b8a9-fbf263a5853a",
      "65f66f2e-ed72-4ba7-9797-2ac543307bfd",
      "cd79ff0e-5ec3-4501-aaed-ec88d771cd22"
    ],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 49,
    "root": true,
    "rootEmpty": false,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}