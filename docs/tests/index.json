{
  "stats": {
    "suites": 26,
    "tests": 53,
    "passes": 53,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-03T11:35:11.755Z",
    "end": "2018-05-03T11:35:11.844Z",
    "duration": 89,
    "testsRegistered": 53,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "16a76f21-53d7-4c4c-bc8c-1c7ca7a03d70",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 2,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "server.listen(port)",
        "err": {},
        "isRoot": true,
        "uuid": "cc159b61-a5f9-4686-932f-20cf171d41ff",
        "isHook": true,
        "skipped": false
      }
    ],
    "afterHooks": [
      {
        "title": "\"after all\" hook",
        "fullTitle": "\"after all\" hook",
        "timedOut": false,
        "duration": 0,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "server.close()",
        "err": {},
        "isRoot": true,
        "uuid": "f70a1a6a-cfd3-48f9-a421-10e3ccf4169f",
        "isHook": true,
        "skipped": false
      }
    ],
    "tests": [
      {
        "title": "integration test of fetching a public resource",
        "fullTitle": "integration test of fetching a public resource",
        "timedOut": false,
        "duration": 15,
        "state": "passed",
        "speed": "fast",
        "pass": true,
        "fail": false,
        "pending": false,
        "code": "const result = await request.get('/resource/master.css')\nexpect(result.status).to.be.equal(200)\nexpect(result.headers['content-type']).to.be.equal('text/css')\nexpect(result.data.includes('margin: 0')).to.be.equal(true)",
        "err": {},
        "isRoot": true,
        "uuid": "594d9b8f-9503-47c9-8bbf-25f654cb4089",
        "isHook": false,
        "skipped": false
      },
      {
        "title": "integration test of the rest dispatcher",
        "fullTitle": "integration test of the rest dispatcher",
        "timedOut": false,
        "duration": 7,
        "state": "passed",
        "speed": "fast",
        "pass": true,
        "fail": false,
        "pending": false,
        "code": "const result =\n{\n  get     : await request.get('/rest'),\n  post    : await request.post('/rest'),\n  put     : await request.put('/rest'),\n  delete  : await request.delete('/rest'),\n  index   : await request.fetch('index', '/rest')\n}\nexpect(result.get.status).to.be.equal(501)\nexpect(result.post.status).to.be.equal(501)\nexpect(result.put.status).to.be.equal(501)\nexpect(result.delete.status).to.be.equal(501)\nexpect(result.index.status).to.be.equal(400)",
        "err": {},
        "isRoot": true,
        "uuid": "d888d3ab-9d6c-4ffb-8255-13a14ab3b262",
        "isHook": false,
        "skipped": false
      },
      {
        "title": "integration test of a raw text response",
        "fullTitle": "integration test of a raw text response",
        "timedOut": false,
        "duration": 1,
        "state": "passed",
        "speed": "fast",
        "pass": true,
        "fail": false,
        "pending": false,
        "code": "const result = await request.get('/test-raw')\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('txt')",
        "err": {},
        "isRoot": true,
        "uuid": "e2cd1654-f953-4e30-b5f4-edca8206767c",
        "isHook": false,
        "skipped": false
      },
      {
        "title": "integration test of a json response",
        "fullTitle": "integration test of a json response",
        "timedOut": false,
        "duration": 1,
        "state": "passed",
        "speed": "fast",
        "pass": true,
        "fail": false,
        "pending": false,
        "code": "const result = await request.get('/test-json')\nexpect(result.status).to.be.equal(200)\nexpect(result.data.foobar).to.be.equal('bazqux')",
        "err": {},
        "isRoot": true,
        "uuid": "543de750-c303-4bc8-afac-dcdc5df725e4",
        "isHook": false,
        "skipped": false
      },
      {
        "title": "integration test of a templated response",
        "fullTitle": "integration test of a templated response",
        "timedOut": false,
        "duration": 16,
        "state": "passed",
        "speed": "fast",
        "pass": true,
        "fail": false,
        "pending": false,
        "code": "const result = await request.get('/test-templated')\nexpect(result.status).to.be.equal(200)\nexpect(result.data.startsWith('layout')).to.be.equal(true)\nexpect(result.data.includes('titled')).to.be.equal(true)\nexpect(result.data.includes('bazqux')).to.be.equal(true)",
        "err": {},
        "isRoot": true,
        "uuid": "037699c1-dbe9-4290-9b35-87c3d1f359c7",
        "isHook": false,
        "skipped": false
      },
      {
        "title": "integration test of the if helper",
        "fullTitle": "integration test of the if helper",
        "timedOut": false,
        "duration": 6,
        "state": "passed",
        "speed": "fast",
        "pass": true,
        "fail": false,
        "pending": false,
        "code": "const result = await request.get('/test-templated')\n// testing the \"if\" helper in the template\nexpect(result.data.includes('==')).to.be.equal(true)\nexpect(result.data.includes('!=')).to.be.equal(true)\nexpect(result.data.includes('<' )).to.be.equal(true)\nexpect(result.data.includes('<=')).to.be.equal(true)\nexpect(result.data.includes('>' )).to.be.equal(true)\nexpect(result.data.includes('>=')).to.be.equal(true)\nexpect(result.data.includes('&&')).to.be.equal(true)\nexpect(result.data.includes('||')).to.be.equal(true)\nexpect(result.data.includes('typeof')).to.be.equal(true)",
        "err": {},
        "isRoot": true,
        "uuid": "ac25b579-e170-4672-833c-b08cee0396a2",
        "isHook": false,
        "skipped": false
      },
      {
        "title": "integration test of a none specified dispatcher should ",
        "fullTitle": "integration test of a none specified dispatcher should ",
        "timedOut": false,
        "duration": 2,
        "state": "passed",
        "speed": "fast",
        "pass": true,
        "fail": false,
        "pending": false,
        "code": "const result = await request.get('/test-501')\nexpect(result.status).to.be.equal(501)\nexpect(result.data).to.be.equal('Not Implemented')",
        "err": {},
        "isRoot": true,
        "uuid": "873bd3d3-3e60-4ee6-b4c3-a04d0d0720a9",
        "isHook": false,
        "skipped": false
      },
      {
        "title": "integration test of a failing dispatcher",
        "fullTitle": "integration test of a failing dispatcher",
        "timedOut": false,
        "duration": 1,
        "state": "passed",
        "speed": "fast",
        "pass": true,
        "fail": false,
        "pending": false,
        "code": "const result = await request.get('/test-failing')\nexpect(result.status).to.be.equal(500)\nexpect(result.data).to.be.equal('Internal Server Error')",
        "err": {},
        "isRoot": true,
        "uuid": "c234de01-db1d-4c0a-83ca-5b5ef5049d5c",
        "isHook": false,
        "skipped": false
      },
      {
        "title": "integration test of a none specified route returns a 404",
        "fullTitle": "integration test of a none specified route returns a 404",
        "timedOut": false,
        "duration": 1,
        "state": "passed",
        "speed": "fast",
        "pass": true,
        "fail": false,
        "pending": false,
        "context": "{\n  \"title\": \"config\",\n  \"value\": [\n    {\n      \"middleware\": \"/middle-1\"\n    },\n    {\n      \"view\": \"json\"\n    },\n    {\n      \"policy\": \"/\",\n      \"dispatcher\": \"index\",\n      \"middleware\": \"/middle-2\"\n    },\n    {\n      \"view\": \"raw\",\n      \"policy\": \"/foo\",\n      \"dispatcher\": \"foo\"\n    },\n    {\n      \"dispatcher\": \"baz\",\n      \"policy\": {\n        \"method\": \"post\",\n        \"path\": \"/bar\"\n      }\n    },\n    {\n      \"policy\": \"/bar\",\n      \"dispatcher\": \"bar\",\n      \"middleware\": [\n        \"/middle-2\",\n        \"/middle-3\"\n      ]\n    }\n  ]\n}",
        "code": "const result = await request.get('/none-existing-path')\nexpect(result.status).to.be.equal(404)\nexpect(result.data).to.be.equal('Not Found')",
        "err": {},
        "isRoot": true,
        "uuid": "de4ef744-9dca-4fcc-a7a2-0c06fb211678",
        "isHook": false,
        "skipped": false
      }
    ],
    "suites": [
      {
        "uuid": "3dcb4b29-b9c3-4d79-aa8f-8b9f4613f946",
        "title": "controller/server/http/router",
        "fullFile": "/home/erik/Projects/@superhero/js.core/controller/server/http/router.test.js",
        "file": "/controller/server/http/router.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "controller/server/http/router \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "context(this, { title:'config', value:config })\nrouter = new Router(config)",
            "err": {},
            "isRoot": false,
            "uuid": "9ad9b254-71cf-493d-8cc3-de1e4b529b84",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e51ed1a7-74cb-4a39-9718-f68521609569",
            "title": "flattenRoutes(routes)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/controller/server/http/router.test.js",
            "file": "/controller/server/http/router.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a flatten route",
                "fullTitle": "controller/server/http/router flattenRoutes(routes) should return a flatten route",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"config\",\n  \"value\": [\n    {\n      \"middleware\": \"/middle-1\"\n    },\n    {\n      \"view\": \"json\"\n    },\n    {\n      \"policy\": \"/\",\n      \"dispatcher\": \"index\",\n      \"middleware\": \"/middle-2\"\n    },\n    {\n      \"view\": \"raw\",\n      \"policy\": \"/foo\",\n      \"dispatcher\": \"foo\"\n    },\n    {\n      \"dispatcher\": \"baz\",\n      \"policy\": {\n        \"method\": \"post\",\n        \"path\": \"/bar\"\n      }\n    },\n    {\n      \"policy\": \"/bar\",\n      \"dispatcher\": \"bar\",\n      \"middleware\": [\n        \"/middle-2\",\n        \"/middle-3\"\n      ]\n    }\n  ]\n}",
                "code": "context(this, { title:'config', value:config })\nconst route = router.flattenRoutes(config)\nexpect(route.view).to.be.equal('json')\nexpect(route.policy).to.be.equal('/')\nexpect(route.dispatcher).to.be.equal('index')\nexpect(route.middleware.length).to.be.equal(2)",
                "err": {},
                "isRoot": false,
                "uuid": "fd52faa4-5e77-4af4-91a5-9e9e9d4b91e8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fd52faa4-5e77-4af4-91a5-9e9e9d4b91e8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ab42695b-0203-4cfa-87ac-d0550fa45151",
            "title": "findRoute(request)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/controller/server/http/router.test.js",
            "file": "/controller/server/http/router.test.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "controller/server/http/router findRoute(request) \"before all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "result1 = router.findRoute({ url:{ pathname:'/' }})\nresult2 = router.findRoute({ url:{ pathname:'/foo' }})\nresult3 = router.findRoute({ url:{ pathname:'/bar' }, method:'get'})\nresult4 = router.findRoute({ url:{ pathname:'/bar' }, method:'post'})\nresult5 = router.findRoute({ url:{ pathname:'/no-matching-pathname' }})",
                "err": {},
                "isRoot": false,
                "uuid": "4df90445-48af-433c-abe5-06a0f5aa636e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "middleware is an array",
                "fullTitle": "controller/server/http/router findRoute(request) middleware is an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result1.middleware).is.an('array')",
                "err": {},
                "isRoot": false,
                "uuid": "a9cf5974-e16a-41d0-ac1d-564d3f9578de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "middleware builds on",
                "fullTitle": "controller/server/http/router findRoute(request) middleware builds on",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result1.middleware.length).to.be.equal(2)",
                "err": {},
                "isRoot": false,
                "uuid": "d7a26650-f426-479e-a3ad-9f5d6fc7120e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "middleware routes correctly",
                "fullTitle": "controller/server/http/router findRoute(request) middleware routes correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result2.middleware.length).to.be.equal(1)",
                "err": {},
                "isRoot": false,
                "uuid": "7cd6376c-8f55-46ef-b61e-7e91a33640e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "middleware can be defined as an array",
                "fullTitle": "controller/server/http/router findRoute(request) middleware can be defined as an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result3.middleware.length).to.be.equal(3)",
                "err": {},
                "isRoot": false,
                "uuid": "e2d2ac0e-fe92-4e29-aa79-9fdec99c5bb9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "view is inherited",
                "fullTitle": "controller/server/http/router findRoute(request) view is inherited",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result1.view).to.be.equal('json')",
                "err": {},
                "isRoot": false,
                "uuid": "2794beb6-8782-4bb5-9224-fa7baa4b7b73",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "found correct dispatcher ",
                "fullTitle": "controller/server/http/router findRoute(request) found correct dispatcher ",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result1.dispatcher).to.be.equal('index')",
                "err": {},
                "isRoot": false,
                "uuid": "fc5401ba-2548-4589-86ce-c606be9a8467",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "overwrite the view",
                "fullTitle": "controller/server/http/router findRoute(request) overwrite the view",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result2.view).to.be.equal('raw')",
                "err": {},
                "isRoot": false,
                "uuid": "580efc16-2daf-440f-af14-3e54cf11b21d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "first match should have hierarchy",
                "fullTitle": "controller/server/http/router findRoute(request) first match should have hierarchy",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result3.dispatcher).to.be.equal('bar')",
                "err": {},
                "isRoot": false,
                "uuid": "35f97577-ce5a-49aa-af97-2496dde00165",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method policy routes correctly",
                "fullTitle": "controller/server/http/router findRoute(request) method policy routes correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result4.dispatcher).to.be.equal('baz')",
                "err": {},
                "isRoot": false,
                "uuid": "37850a65-fbdb-4b75-be73-d34db23dc2f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "no match should return an undefined dispatcher",
                "fullTitle": "controller/server/http/router findRoute(request) no match should return an undefined dispatcher",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result5.dispatcher).to.be.equal(undefined)",
                "err": {},
                "isRoot": false,
                "uuid": "2a14c90e-a321-4241-a685-997759a8295b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a9cf5974-e16a-41d0-ac1d-564d3f9578de",
              "d7a26650-f426-479e-a3ad-9f5d6fc7120e",
              "7cd6376c-8f55-46ef-b61e-7e91a33640e3",
              "e2d2ac0e-fe92-4e29-aa79-9fdec99c5bb9",
              "2794beb6-8782-4bb5-9224-fa7baa4b7b73",
              "fc5401ba-2548-4589-86ce-c606be9a8467",
              "580efc16-2daf-440f-af14-3e54cf11b21d",
              "35f97577-ce5a-49aa-af97-2496dde00165",
              "37850a65-fbdb-4b75-be73-d34db23dc2f4",
              "2a14c90e-a321-4241-a685-997759a8295b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "77ccf42a-7899-46ba-ae4d-836d916e0e0b",
        "title": "controller/server/ws/router",
        "fullFile": "/home/erik/Projects/@superhero/js.core/controller/server/ws/router.test.js",
        "file": "/controller/server/ws/router.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6d3e3e68-2dd7-46e7-8de4-be830d8a1512",
            "title": "findRoute(request)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/controller/server/ws/router.test.js",
            "file": "/controller/server/ws/router.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "correct dispatcher found",
                "fullTitle": "controller/server/ws/router findRoute(request) correct dispatcher found",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result1.dispatcher).to.be.equal('foo')",
                "err": {},
                "isRoot": false,
                "uuid": "ba923022-e9b0-4906-86ca-3ce37d4ba712",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "regex policy",
                "fullTitle": "controller/server/ws/router findRoute(request) regex policy",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result2.dispatcher).to.be.equal('baz')",
                "err": {},
                "isRoot": false,
                "uuid": "2bf066e1-44e9-4736-8ccd-87089438a382",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "no matching policy should return an undefined dispatcher",
                "fullTitle": "controller/server/ws/router findRoute(request) no matching policy should return an undefined dispatcher",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(result3.dispatcher).to.be.equal(undefined)",
                "err": {},
                "isRoot": false,
                "uuid": "d1856135-47d2-45d0-bb6a-7a3f12fc87d7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ba923022-e9b0-4906-86ca-3ce37d4ba712",
              "2bf066e1-44e9-4736-8ccd-87089438a382",
              "d1856135-47d2-45d0-bb6a-7a3f12fc87d7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "41f99374-95c6-42f1-8a5e-af9834825029",
        "title": "error/context",
        "fullFile": "/home/erik/Projects/@superhero/js.core/error/context.test.js",
        "file": "/error/context.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "120763fe-0cb7-4a26-88f4-fbaa7c6f368a",
            "title": "setCode(code)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/error/context.test.js",
            "file": "/error/context.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to retrieve the error code set through `setCode`",
                "fullTitle": "error/context setCode(code) should be able to retrieve the error code set through `setCode`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const code = 'ERR_VALUE_OUT_OF_RANGE'\nerror.setCode(code)\nexpect(error.code).to.be.equal(code)",
                "err": {},
                "isRoot": false,
                "uuid": "faccfdb5-d17e-4fb8-837e-aa16c473356e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "faccfdb5-d17e-4fb8-837e-aa16c473356e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c84fce71-a0c5-4195-a8f4-26881cb5089e",
            "title": "setContext(ctx)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/error/context.test.js",
            "file": "/error/context.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to retrieve the context set through `setContext`",
                "fullTitle": "error/context setContext(ctx) should be able to retrieve the context set through `setContext`",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const ctx = { foo:'bar' }\nerror.setContext(ctx)\nexpect(error.context).to.deep.equal(ctx)",
                "err": {},
                "isRoot": false,
                "uuid": "a73d9a4e-9ec8-4eb6-9175-96ec4c0e8925",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a73d9a4e-9ec8-4eb6-9175-96ec4c0e8925"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "97560559-a8db-42db-91a0-43da4f874513",
        "title": "error/index",
        "fullFile": "/home/erik/Projects/@superhero/js.core/error/index.test.js",
        "file": "/error/index.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "36872628-e4d1-46b9-9662-cd9cf7e2bf72",
            "title": "setCode(code)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/error/index.test.js",
            "file": "/error/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to retrieve the error code set through `setCode`",
                "fullTitle": "error/index setCode(code) should be able to retrieve the error code set through `setCode`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const code = 'ERR_VALUE_OUT_OF_RANGE'\nerror.setCode(code)\nexpect(error.code).to.be.equal(code)",
                "err": {},
                "isRoot": false,
                "uuid": "4d2cd0df-e5c1-4fe3-9906-89edddd5745f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4d2cd0df-e5c1-4fe3-9906-89edddd5745f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3e9b4759-c08a-4d46-8088-d2b89e5f5c52",
        "title": "view/json",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/json.test.js",
        "file": "/view/json.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2396d46b-7bb8-4c75-ac55-58e78efffe78",
            "title": "compose(vm)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/view/json.test.js",
            "file": "/view/json.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a stringified value of `vm.body`",
                "fullTitle": "view/json compose(vm) should return a stringified value of `vm.body`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(json.compose(vm1)).to.be.equal(JSON.stringify(vm1.body))",
                "err": {},
                "isRoot": false,
                "uuid": "baddc80c-bcb1-45cf-afdc-b8be1a7e0521",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set the `vm.headers[\"content-type\"]` to \"application/json\"",
                "fullTitle": "view/json compose(vm) should set the `vm.headers[\"content-type\"]` to \"application/json\"",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(vm1.headers['content-type']).to.be.equal('application/json')",
                "err": {},
                "isRoot": false,
                "uuid": "428aa148-edb4-49c9-9c70-b7c6a9efe1e5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "headers set`",
                "fullTitle": "view/json compose(vm) headers set`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(json.compose(vm2)).to.be.equal(JSON.stringify(vm2.body))",
                "err": {},
                "isRoot": false,
                "uuid": "0a9370a5-6bb3-48c3-a4a6-f74876ea8c04",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "baddc80c-bcb1-45cf-afdc-b8be1a7e0521",
              "428aa148-edb4-49c9-9c70-b7c6a9efe1e5",
              "0a9370a5-6bb3-48c3-a4a6-f74876ea8c04"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7d964aa4-f294-4a80-832a-14120c463269",
        "title": "view/raw",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/raw.test.js",
        "file": "/view/raw.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9c283d76-0a4c-46e6-bb6b-5899143c982f",
            "title": "compose(vm)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/view/raw.test.js",
            "file": "/view/raw.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the value of `vm.body`",
                "fullTitle": "view/raw compose(vm) should return the value of `vm.body`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(raw.compose(vm)).to.be.equal(vm.body)",
                "err": {},
                "isRoot": false,
                "uuid": "368c381d-e3da-4370-9741-9578cf6601bb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "368c381d-e3da-4370-9741-9578cf6601bb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5c6f3332-f9aa-4b33-8513-2c8f60598181",
        "title": "view/template",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template.test.js",
        "file": "/view/template.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a12ed799-65b0-4c52-9f7b-da5d309c8888",
            "title": "static get handlebars",
            "fullFile": "/home/erik/Projects/@superhero/js.core/view/template.test.js",
            "file": "/view/template.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the handlebars instance",
                "fullTitle": "view/template static get handlebars should return the handlebars instance",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(Template.handlebars).to.be.equal(require('handlebars'))",
                "err": {},
                "isRoot": false,
                "uuid": "8b416766-99a2-46a8-9179-a763ea711aeb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8b416766-99a2-46a8-9179-a763ea711aeb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ba4971f5-d9ca-484e-be40-ad0f9dc7332d",
        "title": "view/template/helper/calculate",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/calculate.test.js",
        "file": "/view/template/helper/calculate.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "1 + 1 = 2",
            "fullTitle": "view/template/helper/calculate 1 + 1 = 2",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(calculate(1, '+', 1)).to.be.equal(2)",
            "err": {},
            "isRoot": false,
            "uuid": "a43aed22-0274-40fb-8d0e-c1853162f828",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "4 - 2 = 2",
            "fullTitle": "view/template/helper/calculate 4 - 2 = 2",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(calculate(4, '-', 2)).to.be.equal(2)",
            "err": {},
            "isRoot": false,
            "uuid": "d4873c90-3a1f-4014-872a-a05f645b2ef9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "3 * 3 = 9",
            "fullTitle": "view/template/helper/calculate 3 * 3 = 9",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(calculate(3, '*', 3)).to.be.equal(9)",
            "err": {},
            "isRoot": false,
            "uuid": "cfd13074-4cfb-41e3-a9b3-f146012addf9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "9 / 3 = 3",
            "fullTitle": "view/template/helper/calculate 9 / 3 = 3",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(calculate(9, '/', 3)).to.be.equal(3)",
            "err": {},
            "isRoot": false,
            "uuid": "c4637762-8620-416f-a6b6-bec69345500b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "5 % 3 = 2",
            "fullTitle": "view/template/helper/calculate 5 % 3 = 2",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(calculate(5, '%', 3)).to.be.equal(2)",
            "err": {},
            "isRoot": false,
            "uuid": "3e981d9d-ed72-4e24-bcc1-e1a38682d693",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "empty operator should return an empty string",
            "fullTitle": "view/template/helper/calculate empty operator should return an empty string",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(calculate(1, '', 1)).to.be.equal('')",
            "err": {},
            "isRoot": false,
            "uuid": "9be09d1a-025c-464e-b162-66691a6a272e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "a43aed22-0274-40fb-8d0e-c1853162f828",
          "d4873c90-3a1f-4014-872a-a05f645b2ef9",
          "cfd13074-4cfb-41e3-a9b3-f146012addf9",
          "c4637762-8620-416f-a6b6-bec69345500b",
          "3e981d9d-ed72-4e24-bcc1-e1a38682d693",
          "9be09d1a-025c-464e-b162-66691a6a272e"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "40d01bb6-6c64-46fe-af72-2a3215504eaf",
        "title": "view/template/helper/concat",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/concat.test.js",
        "file": "/view/template/helper/concat.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a concatted string",
            "fullTitle": "view/template/helper/concat should return a concatted string",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(concat('foo','bar','baz')).to.be.equal('foobarbaz')",
            "err": {},
            "isRoot": false,
            "uuid": "11024058-47a8-466c-acba-c14a0a50bbb6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should ignore objects or undefined arguments when concatting",
            "fullTitle": "view/template/helper/concat should ignore objects or undefined arguments when concatting",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(concat('foo', undefined, {}, 'bar')).to.be.equal('foobar')",
            "err": {},
            "isRoot": false,
            "uuid": "7b441e8c-b94d-40c5-9cf8-9dde9b8cac51",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "11024058-47a8-466c-acba-c14a0a50bbb6",
          "7b441e8c-b94d-40c5-9cf8-9dde9b8cac51"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f9c42cc3-8331-40b9-ab05-29b259b27476",
        "title": "view/template/helper/dateformat",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/dateformat.test.js",
        "file": "/view/template/helper/dateformat.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a formated date string",
            "fullTitle": "view/template/helper/dateformat should return a formated date string",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(dateformat(new Date(1524493378898), 'yyyy')).to.be.equal('2018')",
            "err": {},
            "isRoot": false,
            "uuid": "7bd35a99-7289-417c-8d52-52a37198c935",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "7bd35a99-7289-417c-8d52-52a37198c935"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2a5d1567-5e26-4428-922a-c12614331085",
        "title": "view/template/helper/escDoubleQuote",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/escDoubleQuote.test.js",
        "file": "/view/template/helper/escDoubleQuote.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a string with escaped double quotes",
            "fullTitle": "view/template/helper/escDoubleQuote should return a string with escaped double quotes",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(escDoubleQuote('foo \"bar\"')).to.be.equal('foo \\\\\"bar\\\\\"')",
            "err": {},
            "isRoot": false,
            "uuid": "1ca474a3-40ae-4472-beda-4c1fee2dc400",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "1ca474a3-40ae-4472-beda-4c1fee2dc400"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7979b068-6215-4940-b2c9-5b06cb23e771",
        "title": "view/template/helper/escSingelQuote",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/escSingelQuote.test.js",
        "file": "/view/template/helper/escSingelQuote.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a string with escaped singel quotes",
            "fullTitle": "view/template/helper/escSingelQuote should return a string with escaped singel quotes",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(escSingelQuote(\"foo 'bar'\")).to.be.equal(\"foo \\\\'bar\\\\'\")",
            "err": {},
            "isRoot": false,
            "uuid": "2cbe495d-bf86-4191-aa18-3a843681844c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "2cbe495d-bf86-4191-aa18-3a843681844c"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7b9797da-9fb2-4921-acd9-5bac2b0c8dc5",
        "title": "view/template/helper/jsonStringify",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/jsonStringify.test.js",
        "file": "/view/template/helper/jsonStringify.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a stringified json object",
            "fullTitle": "view/template/helper/jsonStringify should return a stringified json object",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(jsonStringify({foo:'bar'})).to.be.equal('{\"foo\":\"bar\"}')",
            "err": {},
            "isRoot": false,
            "uuid": "545a97ab-7a42-497b-be37-c02f7a06bd84",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "545a97ab-7a42-497b-be37-c02f7a06bd84"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "86fff84d-eb1d-47e5-a844-d1aea91f048f",
        "title": "view/template/helper/stripTags",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/stripTags.test.js",
        "file": "/view/template/helper/stripTags.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a string stripped of html tags",
            "fullTitle": "view/template/helper/stripTags should return a string stripped of html tags",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(stripTags('<p>foobar</p>')).to.be.equal('foobar')",
            "err": {},
            "isRoot": false,
            "uuid": "6e36780e-ff6b-4d11-a275-8adb32ca25d2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a number if a number was given",
            "fullTitle": "view/template/helper/stripTags should return a number if a number was given",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(stripTags(5)).to.be.equal(5)",
            "err": {},
            "isRoot": false,
            "uuid": "273c8c19-0ae3-485a-b760-a6b9b57eb514",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "6e36780e-ff6b-4d11-a275-8adb32ca25d2",
          "273c8c19-0ae3-485a-b760-a6b9b57eb514"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f75999fb-3ad4-432b-8da1-8dbcd9bda774",
        "title": "view/template/helper/toFixed",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/toFixed.test.js",
        "file": "/view/template/helper/toFixed.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a padded number",
            "fullTitle": "view/template/helper/toFixed should return a padded number",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(toFixed(5, 2)).to.be.equal('5.00')",
            "err": {},
            "isRoot": false,
            "uuid": "9b4a48b3-66ad-4949-8b1a-10814bd08acd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to handle \"null\"",
            "fullTitle": "view/template/helper/toFixed should be able to handle \"null\"",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(toFixed(null, 2)).to.be.equal('0.00')",
            "err": {},
            "isRoot": false,
            "uuid": "6d1c6a4e-1376-4b3f-9bbb-bec6cf9bc8f4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return NaN if \"undefined\" is spcified",
            "fullTitle": "view/template/helper/toFixed should return NaN if \"undefined\" is spcified",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(toFixed(undefined, 2)).to.be.equal('NaN')",
            "err": {},
            "isRoot": false,
            "uuid": "12b04dfd-e60d-4efc-b9fd-471cfbb58714",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to handle negative numbers",
            "fullTitle": "view/template/helper/toFixed should be able to handle negative numbers",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(toFixed(-5, 2)).to.be.equal('-5.00')",
            "err": {},
            "isRoot": false,
            "uuid": "37215d1e-64a6-493a-87ab-d2b86f703e25",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to handle strings",
            "fullTitle": "view/template/helper/toFixed should be able to handle strings",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(toFixed('5', 2)).to.be.equal('5.00')",
            "err": {},
            "isRoot": false,
            "uuid": "266d6b29-9db1-4026-b2c6-f63c781f8ee3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to handle strings that is not formatted as a number",
            "fullTitle": "view/template/helper/toFixed should be able to handle strings that is not formatted as a number",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(toFixed('foobar', 2)).to.be.equal('NaN')",
            "err": {},
            "isRoot": false,
            "uuid": "2b5f4276-093e-44cc-90d5-932503967611",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "9b4a48b3-66ad-4949-8b1a-10814bd08acd",
          "6d1c6a4e-1376-4b3f-9bbb-bec6cf9bc8f4",
          "12b04dfd-e60d-4efc-b9fd-471cfbb58714",
          "37215d1e-64a6-493a-87ab-d2b86f703e25",
          "266d6b29-9db1-4026-b2c6-f63c781f8ee3",
          "2b5f4276-093e-44cc-90d5-932503967611"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "444b9787-90b1-4db1-8580-aa4a15b2a9c3",
        "title": "view/template/helper/toLowerCase",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/toLowerCase.test.js",
        "file": "/view/template/helper/toLowerCase.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return an uppercase string",
            "fullTitle": "view/template/helper/toLowerCase should return an uppercase string",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(toLowerCase('FooBar')).to.be.equal('foobar')",
            "err": {},
            "isRoot": false,
            "uuid": "19295a85-899e-40d1-a211-a3848a26db45",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "19295a85-899e-40d1-a211-a3848a26db45"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a3d82705-f2b5-4c60-9b25-721fa3455bd4",
        "title": "view/template/helper/toUpperCase",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/template/helper/toUpperCase.test.js",
        "file": "/view/template/helper/toUpperCase.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return an uppercase string",
            "fullTitle": "view/template/helper/toUpperCase should return an uppercase string",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(toUpperCase('Foobar')).to.be.equal('FOOBAR')",
            "err": {},
            "isRoot": false,
            "uuid": "c893620e-9d4f-46e9-ab23-d6e2a340b575",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c893620e-9d4f-46e9-ab23-d6e2a340b575"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [
      "594d9b8f-9503-47c9-8bbf-25f654cb4089",
      "d888d3ab-9d6c-4ffb-8255-13a14ab3b262",
      "e2cd1654-f953-4e30-b5f4-edca8206767c",
      "543de750-c303-4bc8-afac-dcdc5df725e4",
      "037699c1-dbe9-4290-9b35-87c3d1f359c7",
      "ac25b579-e170-4672-833c-b08cee0396a2",
      "873bd3d3-3e60-4ee6-b4c3-a04d0d0720a9",
      "c234de01-db1d-4c0a-83ca-5b5ef5049d5c",
      "de4ef744-9dca-4fcc-a7a2-0c06fb211678"
    ],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 50,
    "root": true,
    "rootEmpty": false,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}