{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-04T12:07:04.077Z",
    "end": "2019-03-04T12:07:04.137Z",
    "duration": 60,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "6527e3cf-a804-4e61-a984-ea1905368303",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "4663c35e-15bf-4d18-8def-4f461740ed94",
        "title": "Core",
        "fullFile": "/home/erik/Projects/@superhero/js.core/test.js",
        "file": "/test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Core \"before all\" hook",
            "timedOut": false,
            "duration": 27,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "const\nCoreFactory = require('./factory'),\ncoreFactory = new CoreFactory\ncore = coreFactory.create()\ncore.add('http/server')\ncore.add('test')\ncore.load()\ncore.locate('path').main.dirname = __dirname\nawait core.locate('bootstrap').bootstrap()\ncore.locate('http/server').listen(9001)",
            "err": {},
            "isRoot": false,
            "uuid": "0e86fbb3-8c76-4bc5-aa4a-7952307e254b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Core \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "await core.locate('http/server').close()",
            "err": {},
            "isRoot": false,
            "uuid": "c94d80e6-0b39-4e22-bd4e-e7acc2c4ae34",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "testing route \"foo\"",
            "fullTitle": "Core testing route \"foo\"",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "{\n  \"title\": \"route\",\n  \"value\": {\n    \"action\": \"/test/foo\",\n    \"endpoint\": \"test/endpoint\"\n  }\n}",
            "code": "const configuration = core.locate('configuration')\nconst httpRequest   = core.locate('http/request')\ncontext(this, { title:'route', value:configuration.find('http.server.routes.test-foo') })\nconst response = await httpRequest.get('http://localhost:9001/test/foo')\n// core.locate('console').log(response)\nexpect(response.data.foo).to.be.equal('foo')\nexpect(response.data.dto).to.deep.equal({})",
            "err": {},
            "isRoot": false,
            "uuid": "f37063f6-9917-4fd6-bd99-bb16055b384b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "testing route \"bar\"",
            "fullTitle": "Core testing route \"bar\"",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "{\n  \"title\": \"route\",\n  \"value\": {\n    \"action\": \"/test/bar\",\n    \"method\": \"get\",\n    \"endpoint\": \"test/endpoint\",\n    \"chain\": [\n      \"test/middleware/one\",\n      \"test/middleware/two\"\n    ]\n  }\n}",
            "code": "const configuration = core.locate('configuration')\nconst httpRequest   = core.locate('http/request')\ncontext(this, { title:'route', value:configuration.find('http.server.routes.test-bar') })\nconst response = await httpRequest.get('http://localhost:9001/test/bar?foo=foobar&bar=bazqux')\n// core.locate('console').log(response)\nexpect(response.data.foo).to.be.equal('bar')\nexpect(response.data.baz).to.be.equal('qux')\nexpect(response.data.dto).to.deep.equal({})",
            "err": {},
            "isRoot": false,
            "uuid": "88735205-df25-45ef-b52d-9bd5a01a21e8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "testing route \"baz\" with dto",
            "fullTitle": "Core testing route \"baz\" with dto",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "{\n  \"title\": \"route\",\n  \"value\": {\n    \"action\": \"/test/baz\",\n    \"method\": \"get\",\n    \"endpoint\": \"test/endpoint\",\n    \"chain\": [\n      \"test/middleware/one\",\n      \"test/middleware/two\"\n    ],\n    \"dto\": {\n      \"foo\": {\n        \"query\": \"foo\"\n      },\n      \"bar\": {\n        \"query\": \"bar\"\n      }\n    }\n  }\n}",
            "code": "const configuration = core.locate('configuration')\nconst httpRequest   = core.locate('http/request')\ncontext(this, { title:'route', value:configuration.find('http.server.routes.test-baz') })\nconst response = await httpRequest.get('http://localhost:9001/test/baz?foo=foobar&bar=bazqux')\n// core.locate('console').log(response)\nexpect(response.data.foo).to.be.equal('bar')\nexpect(response.data.baz).to.be.equal('qux')\nexpect(response.data.dto).to.deep.equal({ foo:'foobar', bar:'bazqux' })",
            "err": {},
            "isRoot": false,
            "uuid": "f7f6c8f2-9ffe-423a-a422-b40502171b0a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "testing the eventbus \"foobar\"",
            "fullTitle": "Core testing the eventbus \"foobar\"",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "{\n  \"title\": \"eventbus.observers\",\n  \"value\": {\n    \"core.error\": [\n      \"console/observer/error\"\n    ],\n    \"foobar\": [\n      \"test/observer/foobar\"\n    ]\n  }\n}",
            "code": "const configuration = core.locate('configuration')\ncontext(this, { title:'eventbus.observers', value:configuration.find('eventbus.observers') })\nconst eventbus = core.locate('eventbus')\neventbus.on('foobar.received', (event) =>\n{\n  expect(event.data).to.be.equal('bazqux')\n  done()\n})\neventbus.emit('foobar', 'bazqux')",
            "err": {},
            "isRoot": false,
            "uuid": "e617e1e8-7f96-4c54-9778-89639b449874",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f37063f6-9917-4fd6-bd99-bb16055b384b",
          "88735205-df25-45ef-b52d-9bd5a01a21e8",
          "f7f6c8f2-9ffe-423a-a422-b40502171b0a",
          "e617e1e8-7f96-4c54-9778-89639b449874"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 18,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}