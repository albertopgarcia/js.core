{
  "stats": {
    "suites": 9,
    "tests": 28,
    "passes": 28,
    "pending": 0,
    "failures": 0,
    "start": "2018-07-30T10:35:40.389Z",
    "end": "2018-07-30T10:35:40.457Z",
    "duration": 68,
    "testsRegistered": 28,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "cecb6408-3df3-418f-8ec8-f335865e5d68",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "72796811-094b-4977-8e21-ae2be62e0cb4",
        "title": "controller/server/http/router",
        "fullFile": "/home/erik/Projects/@superhero/js.core/controller/router/index.test.js",
        "file": "/controller/router/index.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "controller/server/http/router \"before all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"origin\",\n    \"value\": \"/home/erik/Projects/@superhero/js.core/test\"\n  },\n  {\n    \"title\": \"routes\",\n    \"value\": [\n      {\n        \"chain\": \"controller/dispatcher/rest\",\n        \"args\": {}\n      },\n      {\n        \"view\": \"json\",\n        \"args\": {}\n      },\n      {\n        \"test\": 1,\n        \"policy\": \"/\",\n        \"endpoint\": \"controller/dispatcher\",\n        \"args\": {}\n      },\n      {\n        \"test\": 2,\n        \"policy\": {\n          \"path\": \"/foo\",\n          \"method\": \"post\"\n        },\n        \"endpoint\": \"controller/dispatcher\",\n        \"args\": {}\n      },\n      {\n        \"test\": 3,\n        \"policy\": {\n          \"path\": \"/foo\",\n          \"method\": {}\n        },\n        \"endpoint\": \"controller/dispatcher\",\n        \"args\": {}\n      },\n      {\n        \"test\": 4,\n        \"view\": \"raw\",\n        \"policy\": \"/foo\",\n        \"endpoint\": \"controller/dispatcher/rest\",\n        \"chain\": \"controller/dispatcher\",\n        \"args\": {}\n      }\n    ]\n  }\n]",
            "code": "context(this, { title:'origin', value:origin })\ncontext(this, { title:'routes', value:routes })\nRouter = require('.')\nrouter = new Router(origin, routes)",
            "err": {},
            "isRoot": false,
            "uuid": "25ee449d-368f-4a45-9908-ce873ea7fb68",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b9bdc4cb-47c9-45b1-881f-d32eb9a0e34a",
            "title": "composeRoute(routes)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/controller/router/index.test.js",
            "file": "/controller/router/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a flatten route",
                "fullTitle": "controller/server/http/router composeRoute(routes) should return a flatten route",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"routes\",\n  \"value\": [\n    {\n      \"chain\": \"controller/dispatcher/rest\",\n      \"args\": {}\n    },\n    {\n      \"view\": \"json\",\n      \"args\": {}\n    },\n    {\n      \"test\": 1,\n      \"policy\": \"/\",\n      \"endpoint\": \"controller/dispatcher\",\n      \"args\": {}\n    },\n    {\n      \"test\": 2,\n      \"policy\": {\n        \"path\": \"/foo\",\n        \"method\": \"post\"\n      },\n      \"endpoint\": \"controller/dispatcher\",\n      \"args\": {}\n    },\n    {\n      \"test\": 3,\n      \"policy\": {\n        \"path\": \"/foo\",\n        \"method\": {}\n      },\n      \"endpoint\": \"controller/dispatcher\",\n      \"args\": {}\n    },\n    {\n      \"test\": 4,\n      \"view\": \"raw\",\n      \"policy\": \"/foo\",\n      \"endpoint\": \"controller/dispatcher/rest\",\n      \"chain\": \"controller/dispatcher\",\n      \"args\": {}\n    }\n  ]\n}",
                "code": "context(this, { title:'routes', value:routes })\nconst route = router.composeRoute(routes)\nexpect(route.view).to.be.equal('json')\nexpect(route.policy).to.be.equal('/')\nexpect(route.endpoint).to.be.equal('controller/dispatcher')\nexpect(route.chain.length).to.be.equal(1)",
                "err": {},
                "isRoot": false,
                "uuid": "c389d29e-542d-4b77-a1e9-a52e5dd1623c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c389d29e-542d-4b77-a1e9-a52e5dd1623c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "47b044d2-452b-47be-b723-95f817755a8c",
            "title": "findRoute(request)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/controller/router/index.test.js",
            "file": "/controller/router/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "chain is an array",
                "fullTitle": "controller/server/http/router findRoute(request) chain is an array",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ url:{ pathname:'/' }})\nexpect(result.chain).is.an('array')",
                "err": {},
                "isRoot": false,
                "uuid": "f2314b3d-99ca-4a90-996b-c53e8a6eefe0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "chain builds on",
                "fullTitle": "controller/server/http/router findRoute(request) chain builds on",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/' })\nexpect(result.chain.length).to.be.equal(1)",
                "err": {},
                "isRoot": false,
                "uuid": "fef4b554-c100-41b1-9c92-8bffffe15f85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "chain routes correctly",
                "fullTitle": "controller/server/http/router findRoute(request) chain routes correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/foo' })\nexpect(result.chain.length).to.be.equal(2)",
                "err": {},
                "isRoot": false,
                "uuid": "5f3e66b5-4329-4762-94a9-18a858bb9192",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "view is inherited",
                "fullTitle": "controller/server/http/router findRoute(request) view is inherited",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/' })\nexpect(result.view).to.be.equal('json')",
                "err": {},
                "isRoot": false,
                "uuid": "447183f0-4e0d-4a18-866e-d790c9649d6e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "found correct endpoint ",
                "fullTitle": "controller/server/http/router findRoute(request) found correct endpoint ",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/' })\nexpect(result.endpoint).to.be.equal('controller/dispatcher')",
                "err": {},
                "isRoot": false,
                "uuid": "f32b250a-9b58-4ea2-9d14-8b6176f7f43b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "overwrite the view",
                "fullTitle": "controller/server/http/router findRoute(request) overwrite the view",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/foo', method:'get' })\nexpect(result.view).to.be.equal('raw')",
                "err": {},
                "isRoot": false,
                "uuid": "4796f9b4-7b2b-4d23-9cd2-2213069d53ff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method policy routes correctly",
                "fullTitle": "controller/server/http/router findRoute(request) method policy routes correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/foo', method:'post' })\nexpect(result.test).to.be.equal(2)",
                "err": {},
                "isRoot": false,
                "uuid": "dc35eb80-224a-4552-b861-ff2dc6e3fafa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method policy routes correctly, case test",
                "fullTitle": "controller/server/http/router findRoute(request) method policy routes correctly, case test",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/foo', method:'put' })\nexpect(result.test).to.be.equal(3)",
                "err": {},
                "isRoot": false,
                "uuid": "b842bfbe-8ac3-4dd6-814f-58d02a583a87",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "no match should return an undefined endpoint",
                "fullTitle": "controller/server/http/router findRoute(request) no match should return an undefined endpoint",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/no-matching-pathname' })\nexpect(result.endpoint).to.be.equal(undefined)",
                "err": {},
                "isRoot": false,
                "uuid": "b04fa56d-9da5-4c1c-87d5-5cbebbf7f266",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f2314b3d-99ca-4a90-996b-c53e8a6eefe0",
              "fef4b554-c100-41b1-9c92-8bffffe15f85",
              "5f3e66b5-4329-4762-94a9-18a858bb9192",
              "447183f0-4e0d-4a18-866e-d790c9649d6e",
              "f32b250a-9b58-4ea2-9d14-8b6176f7f43b",
              "4796f9b4-7b2b-4d23-9cd2-2213069d53ff",
              "dc35eb80-224a-4552-b861-ff2dc6e3fafa",
              "b842bfbe-8ac3-4dd6-814f-58d02a583a87",
              "b04fa56d-9da5-4c1c-87d5-5cbebbf7f266"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2f5ed1cd-bd65-4732-ae74-7a5e918c18ba",
        "title": "service locator tests",
        "fullFile": "/home/erik/Projects/@superhero/js.core/model/service-locator.test.js",
        "file": "/model/service-locator.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "service locator tests \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "sl = new SL\nsl.set('service', () => new class\n{\n  constructor()\n  {\n    this.i = 0\n  }\n  get foo()\n  {\n    return ++this.i\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "03dbf332-1560-494e-8d71-6a6d639245b9",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "loads a service",
            "fullTitle": "service locator tests loads a service",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const service = await sl.load('service')\nexpect(service.foo).to.be.equal(1)\nexpect(service.foo).to.be.equal(2)",
            "err": {},
            "isRoot": false,
            "uuid": "7212b18a-d129-4996-98d1-329c1733703d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "loads the same instance",
            "fullTitle": "service locator tests loads the same instance",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const service1 = await sl.load('service')\nexpect(service1.foo).to.be.equal(1)\nconst service2 = await sl.load('service')\nexpect(service2.foo).to.be.equal(2)",
            "err": {},
            "isRoot": false,
            "uuid": "4e329a81-7bfc-4ffc-ba38-ce74525510c5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "throws an exception if the service has not been defined",
            "fullTitle": "service locator tests throws an exception if the service has not been defined",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "sl.load('none existing service')\n.then((service) => done(new Error('should not have loaded a service')))\n.catch((error)  =>\n{\n  expect(error.code).to.be.equal('ERR_SERVICE_FACTORY_UNDEFINED')\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "22b92559-999a-4b21-aeb6-d444e6a8ee95",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "7212b18a-d129-4996-98d1-329c1733703d",
          "4e329a81-7bfc-4ffc-ba38-ce74525510c5",
          "22b92559-999a-4b21-aeb6-d444e6a8ee95"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bd8194d4-183c-409d-98b6-26e894a167fa",
        "title": "controller/server/http",
        "fullFile": "/home/erik/Projects/@superhero/js.core/test/http.test.js",
        "file": "/test/http.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "controller/server/http \"before all\" hook",
            "timedOut": false,
            "duration": 10,
            "pass": false,
            "fail": false,
            "pending": false,
            "context": "{\n  \"title\": \"config\",\n  \"value\": {\n    \"routes\": [\n      {\n        \"chain\": [\n          \"controller/middleware-1\",\n          \"controller/middleware-2\"\n        ],\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"../controller/dispatcher/rest\",\n        \"policy\": \"/rest\",\n        \"args\": {}\n      },\n      {\n        \"view\": \"raw\",\n        \"endpoint\": \"controller/txt\",\n        \"policy\": \"/test-raw\",\n        \"args\": {}\n      },\n      {\n        \"view\": \"json\",\n        \"endpoint\": \"controller/obj\",\n        \"policy\": \"/test-json\",\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"controller/failing\",\n        \"policy\": \"/test-failing\",\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"controller/501\",\n        \"policy\": \"/test-501\",\n        \"args\": {}\n      },\n      {\n        \"view\": \"raw\",\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"controller/route-arg-foo\",\n        \"policy\": \"/test-route-arg-body\",\n        \"mapper\": {\n          \"foo\": {\n            \"body\": \"foo\"\n          }\n        },\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"controller/route-arg-foo\",\n        \"policy\": \"/test-route-arg-query\",\n        \"mapper\": {\n          \"foo\": {\n            \"query\": \"foo\"\n          }\n        },\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"controller/route-arg-foo\",\n        \"policy\": \"/bar/test-route-arg-segment\",\n        \"mapper\": {\n          \"foo\": {\n            \"segment\": 0\n          }\n        },\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"controller/route-arg-foo\",\n        \"policy\": \"/bar/test-route-arg-segment-by-number\",\n        \"mapper\": {\n          \"foo\": 0\n        },\n        \"args\": {}\n      },\n      {\n        \"view\": \"json\",\n        \"endpoint\": \"controller/route-enity\",\n        \"policy\": \"/test-route-entity\",\n        \"mapper\": {\n          \"foo\": {\n            \"body\": \"foo\"\n          },\n          \"bar\": {\n            \"body\": \"bar\"\n          },\n          \"baz\": {\n            \"body\": \"baz\"\n          }\n        },\n        \"args\": {}\n      }\n    ]\n  }\n}",
            "code": "const\nRequest = require('@superhero/request'),\nCore    = require('../'),\ncore    = new Core(config),\nport    = 9001\ncontext(this, { title:'config', value:config })\nrequest = new Request({ url:'http://localhost:' + port })\nserver  = core.server('http', config.routes)\nserver.on('listening', () => done())\nserver.listen(port)",
            "err": {},
            "isRoot": false,
            "uuid": "2d446bdc-fcda-4b27-aacc-d7f8e723c0c1",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "controller/server/http \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "server.close()",
            "err": {},
            "isRoot": false,
            "uuid": "aba18d4d-9ddb-4ae3-9812-00510ed5ffe5",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "testing the rest dispatcher",
            "fullTitle": "controller/server/http testing the rest dispatcher",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result =\n{\n  get     : await request.get('/rest'),\n  post    : await request.post('/rest'),\n  put     : await request.put('/rest'),\n  delete  : await request.delete('/rest')\n}\nexpect(result.get.status).to.be.equal(501)\nexpect(result.post.status).to.be.equal(501)\nexpect(result.put.status).to.be.equal(501)\nexpect(result.delete.status).to.be.equal(501)",
            "err": {},
            "isRoot": false,
            "uuid": "956c9344-169a-4f83-87cc-8e3058627fb0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a raw text response",
            "fullTitle": "controller/server/http a raw text response",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-raw')\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('txt')",
            "err": {},
            "isRoot": false,
            "uuid": "203d1480-d2c8-443f-ac50-7f8c1df905e5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a json response",
            "fullTitle": "controller/server/http a json response",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-json')\nexpect(result.status).to.be.equal(200)\nexpect(result.data.foobar).to.be.equal('bazqux')",
            "err": {},
            "isRoot": false,
            "uuid": "1d3d732b-f7d8-4622-bf77-f3963e93fc13",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a none specified endpoint should respond with a status:\"501\"",
            "fullTitle": "controller/server/http a none specified endpoint should respond with a status:\"501\"",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-501')\nexpect(result.status).to.be.equal(501)\nexpect(result.data).to.be.equal('Not Implemented')",
            "err": {},
            "isRoot": false,
            "uuid": "f386b60a-598d-4dfc-a699-5c14164f95a9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a failing dispatcher",
            "fullTitle": "controller/server/http a failing dispatcher",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-failing')\nexpect(result.status).to.be.equal(500)\nexpect(result.data).to.be.equal('Internal Server Error')",
            "err": {},
            "isRoot": false,
            "uuid": "cd31ff96-91ac-4646-94cb-8239e973542f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a none specified route returns a 404",
            "fullTitle": "controller/server/http a none specified route returns a 404",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/none-existing-path')\nexpect(result.status).to.be.equal(404)\nexpect(result.data).to.be.equal('Not Found')",
            "err": {},
            "isRoot": false,
            "uuid": "f75827cf-4a7a-4500-ac2e-62a0e96d2040",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "route.arg body",
            "fullTitle": "controller/server/http route.arg body",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.post(\n{\n  url   : '/test-route-arg-body',\n  data  : { foo:'bar' }\n})\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('bar')",
            "err": {},
            "isRoot": false,
            "uuid": "18cf9a49-5ff3-451a-bcbe-c9bd436239df",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "route.arg query",
            "fullTitle": "controller/server/http route.arg query",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.post('/test-route-arg-query?foo=bar')\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('bar')",
            "err": {},
            "isRoot": false,
            "uuid": "b7364c46-91b5-427e-b174-71ae2af9f084",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "route.arg segment",
            "fullTitle": "controller/server/http route.arg segment",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.post('/bar/test-route-arg-segment')\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('bar')",
            "err": {},
            "isRoot": false,
            "uuid": "bf194bba-05cb-4ac0-bc00-d60a7f743b89",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "route.arg segment by number",
            "fullTitle": "controller/server/http route.arg segment by number",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.post('/bar/test-route-arg-segment-by-number')\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('bar')",
            "err": {},
            "isRoot": false,
            "uuid": "4f1ce3a9-8b12-4905-97f8-539d7de55601",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "route.entity",
            "fullTitle": "controller/server/http route.entity",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.post(\n{\n  url   : '/test-route-entity',\n  data  :\n  {\n    foo : 'foo',\n    bar : 'bar',\n    baz : 'baz'\n  }\n})\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.deep.equal(\n{\n  foo : 'foo',\n  bar : 'bar',\n  baz : 'baz'\n})",
            "err": {},
            "isRoot": false,
            "uuid": "4acbbb2b-8e96-4a67-93eb-79160bb4e385",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "956c9344-169a-4f83-87cc-8e3058627fb0",
          "203d1480-d2c8-443f-ac50-7f8c1df905e5",
          "1d3d732b-f7d8-4622-bf77-f3963e93fc13",
          "f386b60a-598d-4dfc-a699-5c14164f95a9",
          "cd31ff96-91ac-4646-94cb-8239e973542f",
          "f75827cf-4a7a-4500-ac2e-62a0e96d2040",
          "18cf9a49-5ff3-451a-bcbe-c9bd436239df",
          "b7364c46-91b5-427e-b174-71ae2af9f084",
          "bf194bba-05cb-4ac0-bc00-d60a7f743b89",
          "4f1ce3a9-8b12-4905-97f8-539d7de55601",
          "4acbbb2b-8e96-4a67-93eb-79160bb4e385"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 31,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f5046682-46fc-4668-b45c-6fe470f969c3",
        "title": "view/json",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/json.test.js",
        "file": "/view/json.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "view/json \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Json = require('./json')\njson = new Json()",
            "err": {},
            "isRoot": false,
            "uuid": "a23010ca-6bd4-48b8-b674-2cbdb518115c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e35dc7d9-c6ed-4a99-9596-1adae8a8ded6",
            "title": "compose(vm)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/view/json.test.js",
            "file": "/view/json.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a stringified value of `vm.body`",
                "fullTitle": "view/json compose(vm) should return a stringified value of `vm.body`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"view model\",\n  \"value\": {\n    \"body\": {\n      \"foo\": \"bar\"\n    },\n    \"headers\": {\n      \"content-type\": \"application/json\"\n    }\n  }\n}",
                "code": "context(this, { title:'view model', value:vm })\nexpect(json.compose(vm)).to.be.equal(JSON.stringify(vm.body))",
                "err": {},
                "isRoot": false,
                "uuid": "0fefb164-843b-45c2-8ee5-4a187267b029",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set the `vm.headers[\"content-type\"]` to \"application/json\"",
                "fullTitle": "view/json compose(vm) should set the `vm.headers[\"content-type\"]` to \"application/json\"",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"view model\",\n  \"value\": {\n    \"body\": {\n      \"foo\": \"bar\"\n    },\n    \"headers\": {\n      \"content-type\": \"application/json\"\n    }\n  }\n}",
                "code": "context(this, { title:'view model', value:vm })\nexpect(vm.headers['content-type']).to.be.equal('application/json')",
                "err": {},
                "isRoot": false,
                "uuid": "566ec667-5a59-4c02-870c-366dcb83acea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "expected a stringified version of the `vm.body`",
                "fullTitle": "view/json compose(vm) expected a stringified version of the `vm.body`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"view model\",\n  \"value\": {\n    \"body\": {\n      \"foo\": \"bar\"\n    },\n    \"headers\": {\n      \"content-type\": \"application/json\"\n    }\n  }\n}",
                "code": "context(this, { title:'view model', value:vm })\nexpect(json.compose(vm)).to.be.equal(JSON.stringify(vm.body))",
                "err": {},
                "isRoot": false,
                "uuid": "e3b73fc4-49c4-442c-9966-54440c5fb8e0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0fefb164-843b-45c2-8ee5-4a187267b029",
              "566ec667-5a59-4c02-870c-366dcb83acea",
              "e3b73fc4-49c4-442c-9966-54440c5fb8e0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b2a30cec-b062-4b96-8cdc-b92a3479da22",
        "title": "view/raw",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/raw.test.js",
        "file": "/view/raw.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "view/raw \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Raw = require('./raw')\nraw = new Raw()",
            "err": {},
            "isRoot": false,
            "uuid": "e60618aa-8818-4c40-8380-a1014e9554ce",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "dafc40ac-81b8-4678-9fbd-6d79c62bd6a6",
            "title": "compose(vm)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/view/raw.test.js",
            "file": "/view/raw.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the value of `vm.body`",
                "fullTitle": "view/raw compose(vm) should return the value of `vm.body`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"view model\",\n  \"value\": {\n    \"body\": \"foobar\"\n  }\n}",
                "code": "context(this, { title:'view model', value:vm })\nexpect(raw.compose(vm)).to.be.equal(vm.body)",
                "err": {},
                "isRoot": false,
                "uuid": "f2fed251-2c6a-45e1-a1e4-3fcb922cc10e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f2fed251-2c6a-45e1-a1e4-3fcb922cc10e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}