{
  "stats": {
    "suites": 33,
    "tests": 58,
    "passes": 58,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-20T15:25:26.598Z",
    "end": "2018-05-20T15:25:26.667Z",
    "duration": 69,
    "testsRegistered": 58,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "f44112e9-9337-4ae8-a6e7-8ca544bcf065",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "86c6f20c-2e43-4c59-959e-4e8b0bdb7e11",
        "title": "acl",
        "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
        "file": "/acl/index.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b21f1b97-49d7-4046-8ca1-196590759928",
            "title": "from(roles)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to create an instance from a configured json",
                "fullTitle": "acl from(roles) should be able to create an instance from a configured json",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"acl.roles\",\n  \"value\": {\n    \"foo\": {\n      \"users\": [\n        \"foobar\",\n        \"bazqux\"\n      ],\n      \"children\": [],\n      \"resources\": {\n        \"res-1\": [\n          \"perm-1-1\"\n        ],\n        \"res-2\": [\n          \"perm-2-1\",\n          \"perm-2-2\"\n        ]\n      }\n    },\n    \"bar\": {\n      \"users\": [\n        \"foobaz\"\n      ],\n      \"children\": [\n        \"foo\",\n        \"baz\"\n      ],\n      \"resources\": {}\n    },\n    \"baz\": {\n      \"users\": [],\n      \"children\": [],\n      \"resources\": {\n        \"res-1\": [\n          \"perm-1-1\",\n          \"perm-1-2\",\n          \"perm-1-3\"\n        ]\n      }\n    }\n  }\n}",
                "code": "const acl = new Acl\nacl.addRoleUser('foo', 'foobar')\nacl.addRoleUser('foo', 'bazqux')\nacl.addRoleUser('bar', 'foobaz')\nacl.addRoleChild('bar', 'foo')\nacl.addRoleChild('bar', 'baz')\nacl.addRoleResourcePermission('foo', 'res-1', 'perm-1-1')\nacl.addRoleResourcePermission('foo', 'res-2', 'perm-2-1')\nacl.addRoleResourcePermission('foo', 'res-2', 'perm-2-2')\nacl.addRoleResourcePermission('baz', 'res-1', 'perm-1-1')\nacl.addRoleResourcePermission('baz', 'res-1', 'perm-1-2')\nacl.addRoleResourcePermission('baz', 'res-1', 'perm-1-3')\ncontext(this, { title:'acl.roles', value:acl.roles })\nexpect(Acl.from(acl.roles).roles).to.deep.equal(acl.roles)",
                "err": {},
                "isRoot": false,
                "uuid": "39accb68-262c-438f-bd32-1f6aa9daf69c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw an error if there is an invalid key in the arg",
                "fullTitle": "acl from(roles) should throw an error if there is an invalid key in the arg",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(Acl.from.bind(null, { foo:{ bar:'baz' } })).to.throw(Error)",
                "err": {},
                "isRoot": false,
                "uuid": "633a9993-aa6f-4b62-bc2e-1b6bceef9734",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "39accb68-262c-438f-bd32-1f6aa9daf69c",
              "633a9993-aa6f-4b62-bc2e-1b6bceef9734"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6e1e9141-4f40-4720-ad2c-3ad60507a551",
            "title": "hasRole(role)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not find a role not previously added",
                "fullTitle": "acl hasRole(role) should not find a role not previously added",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'role'\nexpect(acl.hasRole(role)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "b723a7c4-f261-4720-8cc6-eca2e53b7fe0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be able to find an existing role",
                "fullTitle": "acl hasRole(role) should be able to find an existing role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'role'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "049cbce2-560f-415e-ad54-29d9520ad9be",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b723a7c4-f261-4720-8cc6-eca2e53b7fe0",
              "049cbce2-560f-415e-ad54-29d9520ad9be"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2d487db4-4613-4909-bef8-8c42f2c9b725",
            "title": "addRole(role)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a role",
                "fullTitle": "acl addRole(role) should be able to add a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'role'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "33e537f2-a683-463f-8358-705a7a40157f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adding the same role multiple times wont reset it",
                "fullTitle": "acl addRole(role) adding the same role multiple times wont reset it",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nuser  = 'bar'\nacl.addRole(role)\nacl.addRoleUser(role, user)\nacl.addRole(role)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "a92e592b-ab8e-4def-a86e-e98c63eac426",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "33e537f2-a683-463f-8358-705a7a40157f",
              "a92e592b-ab8e-4def-a86e-e98c63eac426"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "4255be8d-482a-44eb-b7be-07a205d2e29d",
            "title": "removeRole(role)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "removing a non existing role wont throw",
                "fullTitle": "acl removeRole(role) removing a non existing role wont throw",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo'\nexpect(acl.removeRole.bind(acl, role)).to.not.throw()",
                "err": {},
                "isRoot": false,
                "uuid": "74d1a78a-0f60-4f39-85da-b3430a91ca81",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removing an existing role to be removed",
                "fullTitle": "acl removeRole(role) removing an existing role to be removed",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo'\nacl.addRole(role)\nexpect(acl.hasRole(role)).to.be.equal(true)\nacl.removeRole(role)\nexpect(acl.hasRole(role)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "9311f811-1ca7-46f3-959c-948ec729141e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "74d1a78a-0f60-4f39-85da-b3430a91ca81",
              "9311f811-1ca7-46f3-959c-948ec729141e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2a59d396-1a9c-4618-a5b6-1ab351e8af2b",
            "title": "hasRoleChild(role, child)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return false if child is not child of role",
                "fullTitle": "acl hasRoleChild(role, child) should return false if child is not child of role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)\nacl.addRole(child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "90eaf152-eb34-4ae4-91bf-11f2b88f2d74",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be able to find a child of a role",
                "fullTitle": "acl hasRoleChild(role, child) should be able to find a child of a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nacl.addRoleChild(role, child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "c3f5a61a-3134-43dd-99e5-813eade68bd3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "90eaf152-eb34-4ae4-91bf-11f2b88f2d74",
              "c3f5a61a-3134-43dd-99e5-813eade68bd3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d9c61c23-c87a-47d1-b79d-caf21237d6f6",
            "title": "hasRoleChildRecursively(role, child)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return false if child does not derive from role",
                "fullTitle": "acl hasRoleChildRecursively(role, child) should return false if child does not derive from role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl           = new Acl,\nrole          = 'foo',\nchild         = 'bar',\nchildOfChild  = 'baz'\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRole(child)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRole(childOfChild)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRoleChild(role, child)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "7d91707d-2ed2-4d23-ad96-404df12481d9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return true if child derives from role",
                "fullTitle": "acl hasRoleChildRecursively(role, child) should return true if child derives from role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl           = new Acl,\nrole          = 'foo',\nchild         = 'bar',\nchildOfChild  = 'baz'\nacl.addRoleChild(role, child)\nacl.addRoleChild(child, childOfChild)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "09ea5ca7-ec7c-4c36-be99-c11a59aef4a8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7d91707d-2ed2-4d23-ad96-404df12481d9",
              "09ea5ca7-ec7c-4c36-be99-c11a59aef4a8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f88bc459-d210-482d-a398-ea4e44355be5",
            "title": "addRoleChild(role, child)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a child to a role",
                "fullTitle": "acl addRoleChild(role, child) should be able to add a child to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nacl.addRoleChild(role, child)\nexpect(acl.hasRole(role)).to.be.equal(true)\nexpect(acl.hasRole(child)).to.be.equal(true)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "0d74e143-ad9b-41ad-a119-0fbf9cd35c5e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0d74e143-ad9b-41ad-a119-0fbf9cd35c5e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "51c6e61a-30e0-44d9-8650-9fd57e533d07",
            "title": "removeRoleChild(role, child)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a child from a role",
                "fullTitle": "acl removeRoleChild(role, child) should be able to remove a child from a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nacl.addRoleChild(role, child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(true)\nacl.removeRoleChild(role, child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "cd850fa2-bfd3-4621-9038-b3b5f740a2ce",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cd850fa2-bfd3-4621-9038-b3b5f740a2ce"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6743d4e8-74e1-418d-a1b1-ec4ed4dac1fe",
            "title": "hasRoleUser(role, user)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true only if role has user",
                "fullTitle": "acl hasRoleUser(role, user) should return true only if role has user",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "530b3cde-7dfe-4731-9be7-1def6c72673f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "530b3cde-7dfe-4731-9be7-1def6c72673f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ee8157d8-afb9-4004-8627-6f4c6c5a6593",
            "title": "addRoleUser(role user)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "adding a user to a role also creates the role",
                "fullTitle": "acl addRoleUser(role user) adding a user to a role also creates the role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "74dc2915-7da3-4688-a904-272f3fe7a60e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be able to add a user to a role",
                "fullTitle": "acl addRoleUser(role user) should be able to add a user to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "3217f0a7-4d55-43f6-a15e-79cae6d3aa57",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "74dc2915-7da3-4688-a904-272f3fe7a60e",
              "3217f0a7-4d55-43f6-a15e-79cae6d3aa57"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5c3730d7-3e85-4b3a-a27d-b9989db8d798",
            "title": "removeRoleUser(role, user)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a user from a role",
                "fullTitle": "acl removeRoleUser(role, user) should be able to remove a user from a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)\nacl.removeRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "8bcf9156-f571-4093-9c95-76f7f712a3e4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8bcf9156-f571-4093-9c95-76f7f712a3e4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0dfc6f2a-046e-48ec-8949-c504d3573467",
            "title": "removeUser(user)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a user from all roles",
                "fullTitle": "acl removeUser(user) should be able to remove a user from all roles",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole1 = 'foo',\nrole2 = 'bar',\nrole3 = 'baz',\nuser  = 'qux'\nacl.addRoleUser(role1, user)\nacl.addRoleUser(role2, user)\nexpect(acl.hasRoleUser(role1, user)).to.be.equal(true)\nexpect(acl.hasRoleUser(role2, user)).to.be.equal(true)\nexpect(acl.hasRoleUser(role3, user)).to.be.equal(false)\nacl.removeUser(user)\nexpect(acl.hasRoleUser(role1, user)).to.be.equal(false)\nexpect(acl.hasRoleUser(role2, user)).to.be.equal(false)\nexpect(acl.hasRoleUser(role3, user)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "8b044867-c74c-4315-9dc6-e336d5823b91",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8b044867-c74c-4315-9dc6-e336d5823b91"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3294acd0-7dd8-4cd3-b414-8bf7ab1d057f",
            "title": "hasRoleResource(role, resource)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true only if the role has the resource",
                "fullTitle": "acl hasRoleResource(role, resource) should return true only if the role has the resource",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(false)\nacl.addRoleResource(role, resource)\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "876cb63d-9531-4026-97a8-ddbe883e32e9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "876cb63d-9531-4026-97a8-ddbe883e32e9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "571abef8-07dc-47dd-9f9f-dcbb1190f2b4",
            "title": "addRoleResource(role, resource)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a resource to a role",
                "fullTitle": "acl addRoleResource(role, resource) should be able to add a resource to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(false)\nacl.addRoleResource(role, resource)\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "8de55b4e-4fb7-449a-a014-29199e3b0414",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8de55b4e-4fb7-449a-a014-29199e3b0414"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8c33717d-f592-42e3-95c9-0ccad14a9374",
            "title": "removeRoleResource(role, resource)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a resource from a role",
                "fullTitle": "acl removeRoleResource(role, resource) should be able to remove a resource from a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(false)\nacl.addRoleResource(role, resource)\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(true)\nacl.removeRoleResource(role, resource)\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "e7f63c94-aebb-4860-bc4c-0d413eb8ee8b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removing a resource from a role should not remove the role",
                "fullTitle": "acl removeRoleResource(role, resource) removing a resource from a role should not remove the role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nacl.addRoleResource(role, resource)\nacl.removeRoleResource(role, resource)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "aadd4097-6ec1-4d9e-b4c9-b390e1f807c3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e7f63c94-aebb-4860-bc4c-0d413eb8ee8b",
              "aadd4097-6ec1-4d9e-b4c9-b390e1f807c3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "cc48f32f-20d5-4663-a41e-61e6a901f1c7",
            "title": "removeResource(resource)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a resource from all roles",
                "fullTitle": "acl removeResource(resource) should be able to remove a resource from all roles",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole1     = 'foo',\nrole2     = 'bar',\nrole3     = 'baz',\nresource  = 'qux'\nacl.addRole(role1)\nacl.addRoleResource(role2, resource)\nacl.addRoleResource(role3, resource)\nexpect(acl.hasRoleResource(role1, resource)).to.be.equal(false)\nexpect(acl.hasRoleResource(role2, resource)).to.be.equal(true)\nexpect(acl.hasRoleResource(role3, resource)).to.be.equal(true)\nacl.removeResource(resource)\nexpect(acl.hasRoleResource(role1, resource)).to.be.equal(false)\nexpect(acl.hasRoleResource(role2, resource)).to.be.equal(false)\nexpect(acl.hasRoleResource(role3, resource)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "f846038f-1e18-4cd1-9c05-4eb99ccebc06",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f846038f-1e18-4cd1-9c05-4eb99ccebc06"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "86c54f97-cf7b-4f15-9abe-2a96ba0fdee8",
            "title": "hasRoleResourcePermission(role, resource, permission)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true only if the role has the permission",
                "fullTitle": "acl hasRoleResourcePermission(role, resource, permission) should return true only if the role has the permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(false)\nacl.addRoleResource(role, res)\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(false)\nacl.addRoleResourcePermission(role, res, per)\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "6144b1f1-b36e-4dfa-b8d1-b4dd0912d032",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6144b1f1-b36e-4dfa-b8d1-b4dd0912d032"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "88c2510b-6cf3-411b-8034-98799cda848d",
            "title": "addRoleResourcePermission(role, resource, permission)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a permission to a role",
                "fullTitle": "acl addRoleResourcePermission(role, resource, permission) should be able to add a permission to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(false)\nacl.addRoleResourcePermission(role, res, per)\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "cad78435-1fe0-4b33-be9e-e8726d465f96",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add a resource to the role",
                "fullTitle": "acl addRoleResourcePermission(role, resource, permission) should add a resource to the role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRoleResource(role, res)).to.be.equal(false)\nacl.addRoleResourcePermission(role, res, per)\nexpect(acl.hasRoleResource(role, res)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "25d045bd-bbfa-40ae-bc18-5a109fc7814c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add a role",
                "fullTitle": "acl addRoleResourcePermission(role, resource, permission) should add a role",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRoleResourcePermission(role, res, per)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "40c63847-73d4-43eb-b2f2-404c8a4eafd5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cad78435-1fe0-4b33-be9e-e8726d465f96",
              "25d045bd-bbfa-40ae-bc18-5a109fc7814c",
              "40c63847-73d4-43eb-b2f2-404c8a4eafd5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6fbb4b50-7d06-41a8-9da8-055c9b1bff7f",
            "title": "removeRoleResourcePermission(role, resource, permission)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a permission from a role resource",
                "fullTitle": "acl removeRoleResourcePermission(role, resource, permission) should remove a permission from a role resource",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nacl.addRoleResourcePermission(role, res, per)\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(true)\nacl.removeRoleResourcePermission(role, res, per)\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "562daffa-8f2b-4ddd-b053-475ea38bcdaf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "562daffa-8f2b-4ddd-b053-475ea38bcdaf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "080abcc4-68f8-4fc8-ad5c-91a4a91f3de3",
            "title": "removeResourcePermission(resource, permission)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a permission from a resource on all roles",
                "fullTitle": "acl removeResourcePermission(resource, permission) should remove a permission from a resource on all roles",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole1 = 'foo1',\nrole2 = 'foo2',\nrole3 = 'foo3',\nres   = 'bar',\nper   = 'baz'\nacl.addRoleResource(role1, res)\nacl.addRoleResourcePermission(role2, res, per)\nacl.addRoleResourcePermission(role3, res, per)\nexpect(acl.hasRoleResourcePermission(role1, res, per)).to.be.equal(false)\nexpect(acl.hasRoleResourcePermission(role2, res, per)).to.be.equal(true)\nexpect(acl.hasRoleResourcePermission(role3, res, per)).to.be.equal(true)\nacl.removeResourcePermission(res, per)\nexpect(acl.hasRoleResourcePermission(role1, res, per)).to.be.equal(false)\nexpect(acl.hasRoleResourcePermission(role2, res, per)).to.be.equal(false)\nexpect(acl.hasRoleResourcePermission(role3, res, per)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "2bf22b16-ff43-4077-9c49-6951bb530a75",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not remove the role and resouce",
                "fullTitle": "acl removeResourcePermission(resource, permission) should not remove the role and resouce",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole1 = 'foo1',\nrole2 = 'foo2',\nrole3 = 'foo3',\nres   = 'bar',\nper   = 'baz'\nacl.addRoleResource(role1, res)\nacl.addRoleResourcePermission(role2, res, per)\nacl.addRoleResourcePermission(role3, res, per)\nacl.removeResourcePermission(res, per)\nexpect(acl.hasRoleResource(role1, res, per)).to.be.equal(true)\nexpect(acl.hasRoleResource(role2, res, per)).to.be.equal(true)\nexpect(acl.hasRoleResource(role3, res, per)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "b0279d4f-1d0d-4e02-a884-cec855a246df",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2bf22b16-ff43-4077-9c49-6951bb530a75",
              "b0279d4f-1d0d-4e02-a884-cec855a246df"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "876809a9-27b6-4d30-8907-e12dfd2b368c",
            "title": "getUserRoles(user)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of all the roles a user have",
                "fullTitle": "acl getUserRoles(user) should return a list of all the roles a user have",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nuser  = 'foobar',\nrole1 = 'foo',\nrole2 = 'bar',\nrole3 = 'baz',\nrole4 = 'qux'\nacl.addRoleUser(role1, user)\nacl.addRoleUser(role2, user)\nacl.addRoleChild(role1, role3)\nacl.addRoleChild(role2, role4)\nexpect(acl.getUserRoles(user)).to.have.members([role1, role2])",
                "err": {},
                "isRoot": false,
                "uuid": "826c63ce-663d-4cdb-9a73-63c45a299d75",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "826c63ce-663d-4cdb-9a73-63c45a299d75"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "4bfcc4c4-35a1-43ee-bd9a-1f7d1fd38969",
            "title": "getUserRolesRecursive(user, roles = [])",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of roles and the derieved roles a user have",
                "fullTitle": "acl getUserRolesRecursive(user, roles = []) should return a list of roles and the derieved roles a user have",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nuser1     = 'foobar1',\nuser2     = 'foobar2',\nrole1     = 'foo',\nrole2     = 'bar',\nrole3     = 'baz',\nrole4     = 'qux',\nexpected  = [role1, role2, role3]\nacl.addRoleUser(role1, user1)\nacl.addRoleUser(role2, user1)\nacl.addRoleChild(role1, role3)\nacl.addRole(role4)\nexpect(acl.getUserRolesRecursively(user1)).to.have.members(expected)\nacl.addRoleUser(role4, user2)\nexpect(acl.getUserRolesRecursively(user1)).to.have.members(expected)",
                "err": {},
                "isRoot": false,
                "uuid": "4c0e86e7-6422-42e4-924e-7cce4c61b1f0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4c0e86e7-6422-42e4-924e-7cce4c61b1f0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "68f5cfb5-1d71-468d-8421-84ee970e2ad5",
            "title": "hasUserPermission(user, resource, permission)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only allow a valid permission",
                "fullTitle": "acl hasUserPermission(user, resource, permission) should only allow a valid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nuser        = 'foo',\nrole        = 'bar',\nresource    = 'baz',\npermission  = 'qux'\nacl.addRoleUser(role, user)\nacl.addRoleResourcePermission(role, resource, permission)\nconst result = acl.hasUserPermission(user, resource, permission)\nexpect(result).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "e00de9a0-f1be-4852-ab1c-e004c0c551e2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow a valid permission through a role hierarchy",
                "fullTitle": "acl hasUserPermission(user, resource, permission) should allow a valid permission through a role hierarchy",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nuser1       = 'foo1',\nuser2       = 'foo2',\nrole1       = 'bar1',\nrole2       = 'bar2',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRoleUser(role1, user1)\nacl.addRoleUser(role2, user2)\nacl.addRoleResourcePermission(role1, resource1, permission)\nacl.addRoleResourcePermission(role2, resource2, permission)\nconst result1 = acl.hasUserPermission(user1, resource2, permission)\nexpect(result1).to.be.equal(false)\nacl.addRoleChild(role1, role2)\nconst result2 = acl.hasUserPermission(user1, resource2, permission)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "4a98eba0-b516-41d8-b710-6c5ee8e5a439",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow an invalid permission",
                "fullTitle": "acl hasUserPermission(user, resource, permission) should not allow an invalid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nuser1       = 'foo1',\nuser2       = 'foo2',\nrole1       = 'bar1',\nrole2       = 'bar2',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRoleUser(role1, user1)\nacl.addRoleUser(role2, user2)\nacl.addRoleResourcePermission(role1, resource1, permission)\nacl.addRoleResourcePermission(role2, resource2, permission)\nconst result1 = acl.hasUserPermission(user1, resource1, permission)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.hasUserPermission(user1, resource2, permission)\nexpect(result2).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "4457fa0b-f771-4f1c-b92d-6535e64101ac",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e00de9a0-f1be-4852-ab1c-e004c0c551e2",
              "4a98eba0-b516-41d8-b710-6c5ee8e5a439",
              "4457fa0b-f771-4f1c-b92d-6535e64101ac"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8a15bf93-f663-4518-9095-936c555fc073",
        "title": "controller/server/http/router",
        "fullFile": "/home/superhero/Projects/@superhero/js.core/controller/router/index.test.js",
        "file": "/controller/router/index.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "controller/server/http/router \"before all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"config\",\n    \"value\": {\n      \"mainDirectory\": \"/home/superhero/Projects/@superhero/js.core/test\"\n    }\n  },\n  {\n    \"title\": \"routes\",\n    \"value\": [\n      {\n        \"chain\": \"controller/dispatcher/rest\"\n      },\n      {\n        \"view\": \"json\"\n      },\n      {\n        \"policy\": \"/\",\n        \"endpoint\": \"controller/dispatcher\"\n      },\n      {\n        \"policy\": {\n          \"path\": \"/foo\",\n          \"method\": \"post\"\n        },\n        \"endpoint\": \"controller/dispatcher\"\n      },\n      {\n        \"view\": \"raw\",\n        \"policy\": \"/foo\",\n        \"endpoint\": \"controller/dispatcher/rest\",\n        \"chain\": \"controller/dispatcher\"\n      }\n    ]\n  }\n]",
            "code": "context(this, { title:'config', value:config })\ncontext(this, { title:'routes', value:routes })\nRouter = require('.')\nrouter = new Router(config, routes)",
            "err": {},
            "isRoot": false,
            "uuid": "b037a564-71f1-48fb-b614-3e8cc1a4ed9e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "98984fc7-6e2b-4c79-adb0-bc822e6542cf",
            "title": "composeRoute(routes)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/controller/router/index.test.js",
            "file": "/controller/router/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a flatten route",
                "fullTitle": "controller/server/http/router composeRoute(routes) should return a flatten route",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"routes\",\n  \"value\": [\n    {\n      \"chain\": \"controller/dispatcher/rest\"\n    },\n    {\n      \"view\": \"json\"\n    },\n    {\n      \"policy\": \"/\",\n      \"endpoint\": \"controller/dispatcher\"\n    },\n    {\n      \"policy\": {\n        \"path\": \"/foo\",\n        \"method\": \"post\"\n      },\n      \"endpoint\": \"controller/dispatcher\"\n    },\n    {\n      \"view\": \"raw\",\n      \"policy\": \"/foo\",\n      \"endpoint\": \"controller/dispatcher/rest\",\n      \"chain\": \"controller/dispatcher\"\n    }\n  ]\n}",
                "code": "context(this, { title:'routes', value:routes })\nconst route = router.composeRoute(routes)\nexpect(route.view).to.be.equal('json')\nexpect(route.policy).to.be.equal('/')\nexpect(route.endpoint).to.be.equal('controller/dispatcher')\nexpect(route.chain.length).to.be.equal(1)",
                "err": {},
                "isRoot": false,
                "uuid": "b6089698-fd74-413b-b6a5-ea032b518853",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b6089698-fd74-413b-b6a5-ea032b518853"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7cebedd0-56a4-41a6-8f02-4a3a08521fa1",
            "title": "findRoute(request)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/controller/router/index.test.js",
            "file": "/controller/router/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "chain is an array",
                "fullTitle": "controller/server/http/router findRoute(request) chain is an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ url:{ pathname:'/' }})\nexpect(result.chain).is.an('array')",
                "err": {},
                "isRoot": false,
                "uuid": "9438d035-5351-469b-84ee-d957dc872ff0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "chain builds on",
                "fullTitle": "controller/server/http/router findRoute(request) chain builds on",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/' })\nexpect(result.chain.length).to.be.equal(1)",
                "err": {},
                "isRoot": false,
                "uuid": "1ea86b03-4e8e-445c-b6bb-86ae10423159",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "chain routes correctly",
                "fullTitle": "controller/server/http/router findRoute(request) chain routes correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/foo' })\nexpect(result.chain.length).to.be.equal(2)",
                "err": {},
                "isRoot": false,
                "uuid": "bcca70ca-9197-4a71-ab61-a8d4abe855f9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "view is inherited",
                "fullTitle": "controller/server/http/router findRoute(request) view is inherited",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/' })\nexpect(result.view).to.be.equal('json')",
                "err": {},
                "isRoot": false,
                "uuid": "f792dfe2-9a16-49b8-82c3-927ede5756ea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "found correct endpoint ",
                "fullTitle": "controller/server/http/router findRoute(request) found correct endpoint ",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/' })\nexpect(result.endpoint).to.be.equal('controller/dispatcher')",
                "err": {},
                "isRoot": false,
                "uuid": "25aef04a-2be7-4133-b858-153af0cf94e1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "overwrite the view",
                "fullTitle": "controller/server/http/router findRoute(request) overwrite the view",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/foo', method:'get' })\nexpect(result.view).to.be.equal('raw')",
                "err": {},
                "isRoot": false,
                "uuid": "83bd85ac-8810-4a37-aebd-46c10a5e37c3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method policy routes correctly",
                "fullTitle": "controller/server/http/router findRoute(request) method policy routes correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/foo', method:'post' })\nexpect(result.endpoint).to.be.equal('controller/dispatcher')",
                "err": {},
                "isRoot": false,
                "uuid": "c444b6a3-e119-4464-8cad-a984b8240876",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "no match should return an undefined endpoint",
                "fullTitle": "controller/server/http/router findRoute(request) no match should return an undefined endpoint",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/no-matching-pathname' })\nexpect(result.endpoint).to.be.equal(undefined)",
                "err": {},
                "isRoot": false,
                "uuid": "8418c4a5-69a9-44d7-ae6a-8d1c774ea14c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9438d035-5351-469b-84ee-d957dc872ff0",
              "1ea86b03-4e8e-445c-b6bb-86ae10423159",
              "bcca70ca-9197-4a71-ab61-a8d4abe855f9",
              "f792dfe2-9a16-49b8-82c3-927ede5756ea",
              "25aef04a-2be7-4133-b858-153af0cf94e1",
              "83bd85ac-8810-4a37-aebd-46c10a5e37c3",
              "c444b6a3-e119-4464-8cad-a984b8240876",
              "8418c4a5-69a9-44d7-ae6a-8d1c774ea14c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7c229b96-10af-4e61-ab06-6b0b99ecc79e",
        "title": "service locator tests",
        "fullFile": "/home/superhero/Projects/@superhero/js.core/model/service-locator.test.js",
        "file": "/model/service-locator.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "service locator tests \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "sl = new SL\nsl.add('service', () => new class\n{\n  constructor()\n  {\n    this.i = 0\n  }\n  get foo()\n  {\n    return ++this.i\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "8a391cee-811f-4977-bc1c-88e12e4fcba3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "loads a service",
            "fullTitle": "service locator tests loads a service",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const service = await sl.load('service')\nexpect(service.foo).to.be.equal(1)\nexpect(service.foo).to.be.equal(2)",
            "err": {},
            "isRoot": false,
            "uuid": "0ff42dfe-ed49-4785-9548-f37e10991e7d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "loads the same instance",
            "fullTitle": "service locator tests loads the same instance",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const service1 = await sl.load('service')\nexpect(service1.foo).to.be.equal(1)\nconst service2 = await sl.load('service')\nexpect(service2.foo).to.be.equal(2)",
            "err": {},
            "isRoot": false,
            "uuid": "81c18849-db23-4b45-96b3-b8bfc280ba66",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "throws an exception if the service has not been defined",
            "fullTitle": "service locator tests throws an exception if the service has not been defined",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "sl.load('none existing service')\n.then((service) => done(new Error('should not have loaded a service')))\n.catch((error)  =>\n{\n  expect(error.code).to.be.equal('ERR_SERVICE_FACTORY_UNDEFINED')\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "aed545a7-c647-4f55-bfcb-fa2640fff939",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "0ff42dfe-ed49-4785-9548-f37e10991e7d",
          "81c18849-db23-4b45-96b3-b8bfc280ba66",
          "aed545a7-c647-4f55-bfcb-fa2640fff939"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d1f9818f-e33a-4f8c-bc25-c818f23c8c84",
        "title": "controller/server/http",
        "fullFile": "/home/superhero/Projects/@superhero/js.core/test/http.test.js",
        "file": "/test/http.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "controller/server/http \"before all\" hook",
            "timedOut": false,
            "duration": 9,
            "pass": false,
            "fail": false,
            "pending": false,
            "context": "{\n  \"title\": \"config\",\n  \"value\": {\n    \"routes\": [\n      {\n        \"chain\": [\n          \"controller/middleware-1\",\n          \"controller/middleware-2\"\n        ]\n      },\n      {\n        \"endpoint\": \"../controller/dispatcher/rest\",\n        \"policy\": \"/rest\"\n      },\n      {\n        \"view\": \"raw\",\n        \"endpoint\": \"controller/txt\",\n        \"policy\": \"/test-raw\"\n      },\n      {\n        \"view\": \"json\",\n        \"endpoint\": \"controller/obj\",\n        \"policy\": \"/test-json\"\n      },\n      {\n        \"endpoint\": \"controller/failing\",\n        \"policy\": \"/test-failing\"\n      },\n      {\n        \"endpoint\": \"controller/501\",\n        \"policy\": \"/test-501\"\n      }\n    ]\n  }\n}",
            "code": "const\nRequest = require('@superhero/request'),\nport    = 9001\ncontext(this, { title:'config', value:config })\nrequest = new Request({ url:'http://localhost:' + port })\nserver  = require('../').server('http', config)\nserver.on('listening', () => done())\nserver.listen(port)",
            "err": {},
            "isRoot": false,
            "uuid": "87bba3fa-fb4f-471c-b865-4d15b2546955",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "controller/server/http \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "server.close()",
            "err": {},
            "isRoot": false,
            "uuid": "8aa3b459-7917-48c7-98f5-e3ad0f87f862",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "testing the rest dispatcher",
            "fullTitle": "controller/server/http testing the rest dispatcher",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result =\n{\n  get     : await request.get('/rest'),\n  post    : await request.post('/rest'),\n  put     : await request.put('/rest'),\n  delete  : await request.delete('/rest')\n}\nexpect(result.get.status).to.be.equal(501)\nexpect(result.post.status).to.be.equal(501)\nexpect(result.put.status).to.be.equal(501)\nexpect(result.delete.status).to.be.equal(501)",
            "err": {},
            "isRoot": false,
            "uuid": "9b6fbf69-61b4-4e65-845e-e2c128781a2b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a raw text response",
            "fullTitle": "controller/server/http a raw text response",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-raw')\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('txt')",
            "err": {},
            "isRoot": false,
            "uuid": "48a0c13d-b4dd-4b08-9f74-d8215e8d6ff2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a json response",
            "fullTitle": "controller/server/http a json response",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-json')\nexpect(result.status).to.be.equal(200)\nexpect(result.data.foobar).to.be.equal('bazqux')",
            "err": {},
            "isRoot": false,
            "uuid": "4594fc56-98f1-43b5-8de7-ee7697410515",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a none specified endpoint should respond with a status:\"501\"",
            "fullTitle": "controller/server/http a none specified endpoint should respond with a status:\"501\"",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-501')\nexpect(result.status).to.be.equal(501)\nexpect(result.data).to.be.equal('Not Implemented')",
            "err": {},
            "isRoot": false,
            "uuid": "a3b58c28-d7ba-4004-8d06-db9c5e9bdaa6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a failing dispatcher",
            "fullTitle": "controller/server/http a failing dispatcher",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-failing')\nexpect(result.status).to.be.equal(500)\nexpect(result.data).to.be.equal('Internal Server Error')",
            "err": {},
            "isRoot": false,
            "uuid": "09b9a016-affa-418f-8639-c3b0f32f4bbc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a none specified route returns a 404",
            "fullTitle": "controller/server/http a none specified route returns a 404",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/none-existing-path')\nexpect(result.status).to.be.equal(404)\nexpect(result.data).to.be.equal('Not Found')",
            "err": {},
            "isRoot": false,
            "uuid": "bc90ca10-b1fc-4660-ad8c-27c8952ccf30",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "9b6fbf69-61b4-4e65-845e-e2c128781a2b",
          "48a0c13d-b4dd-4b08-9f74-d8215e8d6ff2",
          "4594fc56-98f1-43b5-8de7-ee7697410515",
          "a3b58c28-d7ba-4004-8d06-db9c5e9bdaa6",
          "09b9a016-affa-418f-8639-c3b0f32f4bbc",
          "bc90ca10-b1fc-4660-ad8c-27c8952ccf30"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 25,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "540a32c3-e8d8-450a-9dc0-5d37dc3a39c7",
        "title": "view/json",
        "fullFile": "/home/superhero/Projects/@superhero/js.core/view/json.test.js",
        "file": "/view/json.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "view/json \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Json = require('./json')\njson = new Json()",
            "err": {},
            "isRoot": false,
            "uuid": "b731d792-ad71-44b1-90b3-7882eb53ea40",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ae788eb4-59b8-4b88-9581-3624e5118958",
            "title": "compose(vm)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/view/json.test.js",
            "file": "/view/json.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a stringified value of `vm.body`",
                "fullTitle": "view/json compose(vm) should return a stringified value of `vm.body`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"view model\",\n  \"value\": {\n    \"body\": {\n      \"foo\": \"bar\"\n    },\n    \"headers\": {\n      \"content-type\": \"application/json\"\n    }\n  }\n}",
                "code": "context(this, { title:'view model', value:vm })\nexpect(json.compose(vm)).to.be.equal(JSON.stringify(vm.body))",
                "err": {},
                "isRoot": false,
                "uuid": "c1b6873c-0830-4154-b7f1-a4f33fc68ad9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set the `vm.headers[\"content-type\"]` to \"application/json\"",
                "fullTitle": "view/json compose(vm) should set the `vm.headers[\"content-type\"]` to \"application/json\"",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"view model\",\n  \"value\": {\n    \"body\": {\n      \"foo\": \"bar\"\n    },\n    \"headers\": {\n      \"content-type\": \"application/json\"\n    }\n  }\n}",
                "code": "context(this, { title:'view model', value:vm })\nexpect(vm.headers['content-type']).to.be.equal('application/json')",
                "err": {},
                "isRoot": false,
                "uuid": "3554cd50-40e7-45fd-8567-87e4c38c374b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "expected a stringified version of the `vm.body`",
                "fullTitle": "view/json compose(vm) expected a stringified version of the `vm.body`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"view model\",\n  \"value\": {\n    \"body\": {\n      \"foo\": \"bar\"\n    },\n    \"headers\": {\n      \"content-type\": \"application/json\"\n    }\n  }\n}",
                "code": "context(this, { title:'view model', value:vm })\nexpect(json.compose(vm)).to.be.equal(JSON.stringify(vm.body))",
                "err": {},
                "isRoot": false,
                "uuid": "c7764540-e194-4e2c-a1c6-9dabf4c60343",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c1b6873c-0830-4154-b7f1-a4f33fc68ad9",
              "3554cd50-40e7-45fd-8567-87e4c38c374b",
              "c7764540-e194-4e2c-a1c6-9dabf4c60343"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0ee2934d-dce5-4dda-a354-bb232c025c2c",
        "title": "view/raw",
        "fullFile": "/home/superhero/Projects/@superhero/js.core/view/raw.test.js",
        "file": "/view/raw.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "view/raw \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Raw = require('./raw')\nraw = new Raw()",
            "err": {},
            "isRoot": false,
            "uuid": "333eb09e-c07c-40ba-b561-dc26d0c5728a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "09ae89e3-3616-4bbe-8e2d-3f4797a038e3",
            "title": "compose(vm)",
            "fullFile": "/home/superhero/Projects/@superhero/js.core/view/raw.test.js",
            "file": "/view/raw.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the value of `vm.body`",
                "fullTitle": "view/raw compose(vm) should return the value of `vm.body`",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"view model\",\n  \"value\": {\n    \"body\": \"foobar\"\n  }\n}",
                "code": "context(this, { title:'view model', value:vm })\nexpect(raw.compose(vm)).to.be.equal(vm.body)",
                "err": {},
                "isRoot": false,
                "uuid": "9f3fbe4d-d439-4c22-bbcd-cfc6e055f957",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9f3fbe4d-d439-4c22-bbcd-cfc6e055f957"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}