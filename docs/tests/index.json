{
  "stats": {
    "suites": 5,
    "tests": 24,
    "passes": 24,
    "pending": 0,
    "failures": 0,
    "start": "2018-08-22T13:47:12.789Z",
    "end": "2018-08-22T13:47:12.857Z",
    "duration": 68,
    "testsRegistered": 24,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "73db0fc1-bf72-4a03-af25-50aff332cd71",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "7885302d-609d-4fa8-813f-db986cd7799a",
        "title": "controller/server/http/router",
        "fullFile": "/home/erik/Projects/@superhero/js.core/controller/router/index.test.js",
        "file": "/controller/router/index.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "controller/server/http/router \"before all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"origin\",\n    \"value\": \"/home/erik/Projects/@superhero/js.core/test\"\n  },\n  {\n    \"title\": \"routes\",\n    \"value\": [\n      {\n        \"chain\": \"controller/dispatcher/rest\",\n        \"args\": {}\n      },\n      {\n        \"view\": \"json\",\n        \"args\": {}\n      },\n      {\n        \"test\": 1,\n        \"policy\": \"/\",\n        \"endpoint\": \"controller/dispatcher\",\n        \"args\": {}\n      },\n      {\n        \"test\": 2,\n        \"policy\": {\n          \"path\": \"/foo\",\n          \"method\": \"post\"\n        },\n        \"endpoint\": \"controller/dispatcher\",\n        \"args\": {}\n      },\n      {\n        \"test\": 3,\n        \"policy\": {\n          \"path\": \"/foo\",\n          \"method\": {}\n        },\n        \"endpoint\": \"controller/dispatcher\",\n        \"args\": {}\n      },\n      {\n        \"test\": 4,\n        \"view\": \"raw\",\n        \"policy\": \"/foo\",\n        \"endpoint\": \"controller/dispatcher/rest\",\n        \"chain\": \"controller/dispatcher\",\n        \"args\": {}\n      }\n    ]\n  }\n]",
            "code": "context(this, { title:'origin', value:origin })\ncontext(this, { title:'routes', value:routes })\nRouter = require('.')\nrouter = new Router(origin, routes)",
            "err": {},
            "isRoot": false,
            "uuid": "a76be2d9-c780-48ce-900e-e288b0892250",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7982abf6-4516-4d24-a5e0-51b50fe70379",
            "title": "composeRoute(routes)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/controller/router/index.test.js",
            "file": "/controller/router/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a flatten route",
                "fullTitle": "controller/server/http/router composeRoute(routes) should return a flatten route",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"routes\",\n  \"value\": [\n    {\n      \"chain\": \"controller/dispatcher/rest\",\n      \"args\": {}\n    },\n    {\n      \"view\": \"json\",\n      \"args\": {}\n    },\n    {\n      \"test\": 1,\n      \"policy\": \"/\",\n      \"endpoint\": \"controller/dispatcher\",\n      \"args\": {}\n    },\n    {\n      \"test\": 2,\n      \"policy\": {\n        \"path\": \"/foo\",\n        \"method\": \"post\"\n      },\n      \"endpoint\": \"controller/dispatcher\",\n      \"args\": {}\n    },\n    {\n      \"test\": 3,\n      \"policy\": {\n        \"path\": \"/foo\",\n        \"method\": {}\n      },\n      \"endpoint\": \"controller/dispatcher\",\n      \"args\": {}\n    },\n    {\n      \"test\": 4,\n      \"view\": \"raw\",\n      \"policy\": \"/foo\",\n      \"endpoint\": \"controller/dispatcher/rest\",\n      \"chain\": \"controller/dispatcher\",\n      \"args\": {}\n    }\n  ]\n}",
                "code": "context(this, { title:'routes', value:routes })\nconst route = router.composeRoute(routes)\nexpect(route.view).to.be.equal('json')\nexpect(route.policy).to.be.equal('/')\nexpect(route.endpoint).to.be.equal('controller/dispatcher')\nexpect(route.chain.length).to.be.equal(1)",
                "err": {},
                "isRoot": false,
                "uuid": "95447675-4181-461c-813e-386ce76ba107",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "95447675-4181-461c-813e-386ce76ba107"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "17c1c318-dec7-4f17-8d26-9bdc1680e3b6",
            "title": "findRoute(request)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/controller/router/index.test.js",
            "file": "/controller/router/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "chain is an array",
                "fullTitle": "controller/server/http/router findRoute(request) chain is an array",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ url:{ pathname:'/' }})\nexpect(result.chain).is.an('array')",
                "err": {},
                "isRoot": false,
                "uuid": "ad5b5749-22f8-4401-bbf6-9fb10a5d5ac0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "chain builds on",
                "fullTitle": "controller/server/http/router findRoute(request) chain builds on",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/' })\nexpect(result.chain.length).to.be.equal(1)",
                "err": {},
                "isRoot": false,
                "uuid": "32af9301-8cf5-4641-bfd2-a08292b828e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "chain routes correctly",
                "fullTitle": "controller/server/http/router findRoute(request) chain routes correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/foo' })\nexpect(result.chain.length).to.be.equal(2)",
                "err": {},
                "isRoot": false,
                "uuid": "fc851368-0fd4-4d73-a0bd-e37df5e18e15",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "view is inherited",
                "fullTitle": "controller/server/http/router findRoute(request) view is inherited",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/' })\nexpect(result.view).to.be.equal('json')",
                "err": {},
                "isRoot": false,
                "uuid": "e6218320-675d-4aee-86ad-02fda7253aa0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "found correct endpoint ",
                "fullTitle": "controller/server/http/router findRoute(request) found correct endpoint ",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/' })\nexpect(result.endpoint).to.be.equal('controller/dispatcher')",
                "err": {},
                "isRoot": false,
                "uuid": "8d1d9d83-c48e-42e2-9803-4adea768919e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "overwrite the view",
                "fullTitle": "controller/server/http/router findRoute(request) overwrite the view",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/foo', method:'get' })\nexpect(result.view).to.be.equal('raw')",
                "err": {},
                "isRoot": false,
                "uuid": "304788ea-0597-4c8b-b634-5de84999e6e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method policy routes correctly",
                "fullTitle": "controller/server/http/router findRoute(request) method policy routes correctly",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/foo', method:'post' })\nexpect(result.test).to.be.equal(2)",
                "err": {},
                "isRoot": false,
                "uuid": "9587794e-fa9b-4e45-a23d-52314ef3ac1b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method policy routes correctly, case test",
                "fullTitle": "controller/server/http/router findRoute(request) method policy routes correctly, case test",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/foo', method:'put' })\nexpect(result.test).to.be.equal(3)",
                "err": {},
                "isRoot": false,
                "uuid": "b88ef7dc-8dd3-4e3a-8b87-6a5283861fc7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "no match should return an undefined endpoint",
                "fullTitle": "controller/server/http/router findRoute(request) no match should return an undefined endpoint",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/no-matching-pathname' })\nexpect(result.endpoint).to.be.equal(undefined)",
                "err": {},
                "isRoot": false,
                "uuid": "543f34fa-34e8-44f6-bcde-84126cba9361",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ad5b5749-22f8-4401-bbf6-9fb10a5d5ac0",
              "32af9301-8cf5-4641-bfd2-a08292b828e3",
              "fc851368-0fd4-4d73-a0bd-e37df5e18e15",
              "e6218320-675d-4aee-86ad-02fda7253aa0",
              "8d1d9d83-c48e-42e2-9803-4adea768919e",
              "304788ea-0597-4c8b-b634-5de84999e6e3",
              "9587794e-fa9b-4e45-a23d-52314ef3ac1b",
              "b88ef7dc-8dd3-4e3a-8b87-6a5283861fc7",
              "543f34fa-34e8-44f6-bcde-84126cba9361"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "80cb0441-3f28-4109-86b2-0efa5289a003",
        "title": "service locator tests",
        "fullFile": "/home/erik/Projects/@superhero/js.core/model/service-locator.test.js",
        "file": "/model/service-locator.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "service locator tests \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "sl = new SL\nsl.set('service', () => new class\n{\n  constructor()\n  {\n    this.i = 0\n  }\n  get foo()\n  {\n    return ++this.i\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "ef163b12-ae4a-4948-99a2-418459527d4c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "loads a service",
            "fullTitle": "service locator tests loads a service",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const service = await sl.load('service')\nexpect(service.foo).to.be.equal(1)\nexpect(service.foo).to.be.equal(2)",
            "err": {},
            "isRoot": false,
            "uuid": "ba5e3b9c-025e-408e-ada4-e9331f824e02",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "loads the same instance",
            "fullTitle": "service locator tests loads the same instance",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const service1 = await sl.load('service')\nexpect(service1.foo).to.be.equal(1)\nconst service2 = await sl.load('service')\nexpect(service2.foo).to.be.equal(2)",
            "err": {},
            "isRoot": false,
            "uuid": "f33605e1-85f3-49eb-9b2a-9fd2b675c615",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "throws an exception if the service has not been defined",
            "fullTitle": "service locator tests throws an exception if the service has not been defined",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "sl.load('none existing service')\n.then((service) => done(new Error('should not have loaded a service')))\n.catch((error)  =>\n{\n  expect(error.code).to.be.equal('ERR_SERVICE_FACTORY_UNDEFINED')\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "64200e3d-fa39-4e1c-a335-edffded84855",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ba5e3b9c-025e-408e-ada4-e9331f824e02",
          "f33605e1-85f3-49eb-9b2a-9fd2b675c615",
          "64200e3d-fa39-4e1c-a335-edffded84855"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "892ed187-c9e6-45d5-b6d0-1e4b01e99727",
        "title": "controller/server/http",
        "fullFile": "/home/erik/Projects/@superhero/js.core/test/http.test.js",
        "file": "/test/http.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "controller/server/http \"before all\" hook",
            "timedOut": false,
            "duration": 10,
            "pass": false,
            "fail": false,
            "pending": false,
            "context": "{\n  \"title\": \"config\",\n  \"value\": {\n    \"routes\": [\n      {\n        \"chain\": [\n          \"controller/middleware-1\",\n          \"controller/middleware-2\"\n        ],\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"../controller/dispatcher/rest\",\n        \"policy\": \"/rest\",\n        \"args\": {}\n      },\n      {\n        \"view\": \"raw\",\n        \"endpoint\": \"controller/txt\",\n        \"policy\": \"/test-raw\",\n        \"args\": {}\n      },\n      {\n        \"view\": \"json\",\n        \"endpoint\": \"controller/obj\",\n        \"policy\": \"/test-json\",\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"controller/failing\",\n        \"policy\": \"/test-failing\",\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"controller/501\",\n        \"policy\": \"/test-501\",\n        \"args\": {}\n      },\n      {\n        \"view\": \"raw\",\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"controller/route-arg-foo\",\n        \"policy\": \"/test-route-arg-body\",\n        \"mapper\": {\n          \"foo\": {\n            \"body\": \"foo\"\n          }\n        },\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"controller/route-arg-foo\",\n        \"policy\": \"/test-route-arg-query\",\n        \"mapper\": {\n          \"foo\": {\n            \"query\": \"foo\"\n          }\n        },\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"controller/route-arg-foo\",\n        \"policy\": \"/bar/test-route-arg-segment\",\n        \"mapper\": {\n          \"foo\": {\n            \"segment\": 0\n          }\n        },\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"controller/route-arg-foo\",\n        \"policy\": \"/bar/test-route-arg-segment-by-number\",\n        \"mapper\": {\n          \"foo\": 0\n        },\n        \"args\": {}\n      },\n      {\n        \"view\": \"json\",\n        \"endpoint\": \"controller/route-enity\",\n        \"policy\": \"/test-route-entity\",\n        \"mapper\": {\n          \"foo\": {\n            \"body\": \"foo\"\n          },\n          \"bar\": {\n            \"body\": \"bar\"\n          },\n          \"baz\": {\n            \"body\": \"baz\"\n          }\n        },\n        \"args\": {}\n      }\n    ]\n  }\n}",
            "code": "const\nRequest = require('@superhero/request'),\nCore    = require('../'),\ncore    = new Core(config),\nport    = 9001\ncontext(this, { title:'config', value:config })\nrequest = new Request({ url:'http://localhost:' + port })\nserver  = core.server('http', config.routes)\nserver.on('listening', () => done())\nserver.listen(port)",
            "err": {},
            "isRoot": false,
            "uuid": "f702a400-6fe0-460b-b665-158995d27633",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "controller/server/http \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "server.close()",
            "err": {},
            "isRoot": false,
            "uuid": "9db4b60a-ff35-4b54-80ed-7e31b8819e4f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "testing the rest dispatcher",
            "fullTitle": "controller/server/http testing the rest dispatcher",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result =\n{\n  get     : await request.get('/rest'),\n  post    : await request.post('/rest'),\n  put     : await request.put('/rest'),\n  delete  : await request.delete('/rest')\n}\nexpect(result.get.status).to.be.equal(501)\nexpect(result.post.status).to.be.equal(501)\nexpect(result.put.status).to.be.equal(501)\nexpect(result.delete.status).to.be.equal(501)",
            "err": {},
            "isRoot": false,
            "uuid": "1f293afe-1a1d-480b-bc26-0f5011568cab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a raw text response",
            "fullTitle": "controller/server/http a raw text response",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-raw')\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('txt')",
            "err": {},
            "isRoot": false,
            "uuid": "08f4a231-2d70-4f3c-81a5-cbce6ef6ec15",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a json response",
            "fullTitle": "controller/server/http a json response",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-json')\nexpect(result.status).to.be.equal(200)\nexpect(result.data.foobar).to.be.equal('bazqux')",
            "err": {},
            "isRoot": false,
            "uuid": "29bdc672-50db-4a6c-b4ee-20f593396222",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a none specified endpoint should respond with a status:\"501\"",
            "fullTitle": "controller/server/http a none specified endpoint should respond with a status:\"501\"",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-501')\nexpect(result.status).to.be.equal(501)\nexpect(result.data).to.be.equal('Not Implemented')",
            "err": {},
            "isRoot": false,
            "uuid": "811e1189-6534-46d6-b6bb-a8a39ba2e080",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a failing dispatcher",
            "fullTitle": "controller/server/http a failing dispatcher",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-failing')\nexpect(result.status).to.be.equal(500)\nexpect(result.data).to.be.equal('Internal Server Error')",
            "err": {},
            "isRoot": false,
            "uuid": "d7e1666a-30bb-4692-8dc6-804b83d2a09c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a none specified route returns a 404",
            "fullTitle": "controller/server/http a none specified route returns a 404",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/none-existing-path')\nexpect(result.status).to.be.equal(404)\nexpect(result.data).to.be.equal('Not Found')",
            "err": {},
            "isRoot": false,
            "uuid": "04c1a700-b56e-4ae1-b196-dda6c8112a7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "route.arg body",
            "fullTitle": "controller/server/http route.arg body",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.post(\n{\n  url   : '/test-route-arg-body',\n  data  : { foo:'bar' }\n})\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('bar')",
            "err": {},
            "isRoot": false,
            "uuid": "043a01b4-94f7-469b-81f4-8fc974431c38",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "route.arg query",
            "fullTitle": "controller/server/http route.arg query",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.post('/test-route-arg-query?foo=bar')\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('bar')",
            "err": {},
            "isRoot": false,
            "uuid": "b6798b2a-ad4e-4068-957c-8722f66bdef6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "route.arg segment",
            "fullTitle": "controller/server/http route.arg segment",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.post('/bar/test-route-arg-segment')\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('bar')",
            "err": {},
            "isRoot": false,
            "uuid": "f8faeb0a-c01b-40c6-bbc9-b704df4b035f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "route.arg segment by number",
            "fullTitle": "controller/server/http route.arg segment by number",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.post('/bar/test-route-arg-segment-by-number')\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('bar')",
            "err": {},
            "isRoot": false,
            "uuid": "b4da270d-915b-4018-9501-0dcdca0ac5c8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "route.entity",
            "fullTitle": "controller/server/http route.entity",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.post(\n{\n  url   : '/test-route-entity',\n  data  :\n  {\n    foo : 'foo',\n    bar : 'bar',\n    baz : 'baz'\n  }\n})\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.deep.equal(\n{\n  foo : 'foo',\n  bar : 'bar',\n  baz : 'baz'\n})",
            "err": {},
            "isRoot": false,
            "uuid": "82912e1e-c82f-4a3c-b9a1-1927fda8cb99",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "1f293afe-1a1d-480b-bc26-0f5011568cab",
          "08f4a231-2d70-4f3c-81a5-cbce6ef6ec15",
          "29bdc672-50db-4a6c-b4ee-20f593396222",
          "811e1189-6534-46d6-b6bb-a8a39ba2e080",
          "d7e1666a-30bb-4692-8dc6-804b83d2a09c",
          "04c1a700-b56e-4ae1-b196-dda6c8112a7b",
          "043a01b4-94f7-469b-81f4-8fc974431c38",
          "b6798b2a-ad4e-4068-957c-8722f66bdef6",
          "f8faeb0a-c01b-40c6-bbc9-b704df4b035f",
          "b4da270d-915b-4018-9501-0dcdca0ac5c8",
          "82912e1e-c82f-4a3c-b9a1-1927fda8cb99"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 33,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "89952687-6fe5-4ee5-a465-934b98b349ed",
        "title": "view/json",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/json.test.js",
        "file": "/view/json.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "view/json \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Json = require('./json')\njson = new Json()",
            "err": {},
            "isRoot": false,
            "uuid": "52f17143-3ba9-4945-b742-ab1f4308b224",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "cab592f1-3bed-447e-80fa-8a3eb7fcd51f",
        "title": "view/raw",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/raw.test.js",
        "file": "/view/raw.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "view/raw \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Raw = require('./raw')\nraw = new Raw()",
            "err": {},
            "isRoot": false,
            "uuid": "f8b49630-147b-4ed6-b323-8bcb397ffeda",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}