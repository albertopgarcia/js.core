{
  "stats": {
    "suites": 9,
    "tests": 28,
    "passes": 28,
    "pending": 0,
    "failures": 0,
    "start": "2018-06-28T14:36:30.280Z",
    "end": "2018-06-28T14:36:30.351Z",
    "duration": 71,
    "testsRegistered": 28,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "234b7c19-b92d-4927-96c9-b977a8c4118b",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "81c82371-6c8b-4923-b2e9-b501297bef5d",
        "title": "controller/server/http/router",
        "fullFile": "/home/erik/Projects/@superhero/js.core/controller/router/index.test.js",
        "file": "/controller/router/index.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "controller/server/http/router \"before all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"origin\",\n    \"value\": \"/home/erik/Projects/@superhero/js.core/test\"\n  },\n  {\n    \"title\": \"routes\",\n    \"value\": [\n      {\n        \"chain\": \"controller/dispatcher/rest\",\n        \"args\": {}\n      },\n      {\n        \"view\": \"json\",\n        \"args\": {}\n      },\n      {\n        \"test\": 1,\n        \"policy\": \"/\",\n        \"endpoint\": \"controller/dispatcher\",\n        \"args\": {}\n      },\n      {\n        \"test\": 2,\n        \"policy\": {\n          \"path\": \"/foo\",\n          \"method\": \"post\"\n        },\n        \"endpoint\": \"controller/dispatcher\",\n        \"args\": {}\n      },\n      {\n        \"test\": 3,\n        \"policy\": {\n          \"path\": \"/foo\",\n          \"method\": {}\n        },\n        \"endpoint\": \"controller/dispatcher\",\n        \"args\": {}\n      },\n      {\n        \"test\": 4,\n        \"view\": \"raw\",\n        \"policy\": \"/foo\",\n        \"endpoint\": \"controller/dispatcher/rest\",\n        \"chain\": \"controller/dispatcher\",\n        \"args\": {}\n      }\n    ]\n  }\n]",
            "code": "context(this, { title:'origin', value:origin })\ncontext(this, { title:'routes', value:routes })\nRouter = require('.')\nrouter = new Router(origin, routes)",
            "err": {},
            "isRoot": false,
            "uuid": "fff23566-e483-41b4-8baf-932934c2f39f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f8d142cd-064b-408d-a062-6fad0547066d",
            "title": "composeRoute(routes)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/controller/router/index.test.js",
            "file": "/controller/router/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a flatten route",
                "fullTitle": "controller/server/http/router composeRoute(routes) should return a flatten route",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"routes\",\n  \"value\": [\n    {\n      \"chain\": \"controller/dispatcher/rest\",\n      \"args\": {}\n    },\n    {\n      \"view\": \"json\",\n      \"args\": {}\n    },\n    {\n      \"test\": 1,\n      \"policy\": \"/\",\n      \"endpoint\": \"controller/dispatcher\",\n      \"args\": {}\n    },\n    {\n      \"test\": 2,\n      \"policy\": {\n        \"path\": \"/foo\",\n        \"method\": \"post\"\n      },\n      \"endpoint\": \"controller/dispatcher\",\n      \"args\": {}\n    },\n    {\n      \"test\": 3,\n      \"policy\": {\n        \"path\": \"/foo\",\n        \"method\": {}\n      },\n      \"endpoint\": \"controller/dispatcher\",\n      \"args\": {}\n    },\n    {\n      \"test\": 4,\n      \"view\": \"raw\",\n      \"policy\": \"/foo\",\n      \"endpoint\": \"controller/dispatcher/rest\",\n      \"chain\": \"controller/dispatcher\",\n      \"args\": {}\n    }\n  ]\n}",
                "code": "context(this, { title:'routes', value:routes })\nconst route = router.composeRoute(routes)\nexpect(route.view).to.be.equal('json')\nexpect(route.policy).to.be.equal('/')\nexpect(route.endpoint).to.be.equal('controller/dispatcher')\nexpect(route.chain.length).to.be.equal(1)",
                "err": {},
                "isRoot": false,
                "uuid": "51889d2f-8b99-4817-b5d8-e95d0a4df57c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "51889d2f-8b99-4817-b5d8-e95d0a4df57c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f8c8e428-ffbb-4e7f-aeb6-4a60ae11db97",
            "title": "findRoute(request)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/controller/router/index.test.js",
            "file": "/controller/router/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "chain is an array",
                "fullTitle": "controller/server/http/router findRoute(request) chain is an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ url:{ pathname:'/' }})\nexpect(result.chain).is.an('array')",
                "err": {},
                "isRoot": false,
                "uuid": "48f262a3-666f-4587-be9b-95b973486764",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "chain builds on",
                "fullTitle": "controller/server/http/router findRoute(request) chain builds on",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/' })\nexpect(result.chain.length).to.be.equal(1)",
                "err": {},
                "isRoot": false,
                "uuid": "20a7c073-0e93-4e9a-a831-8430b83fe92b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "chain routes correctly",
                "fullTitle": "controller/server/http/router findRoute(request) chain routes correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/foo' })\nexpect(result.chain.length).to.be.equal(2)",
                "err": {},
                "isRoot": false,
                "uuid": "4d4cd728-1225-45fd-b1c1-586190ec3c2a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "view is inherited",
                "fullTitle": "controller/server/http/router findRoute(request) view is inherited",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/' })\nexpect(result.view).to.be.equal('json')",
                "err": {},
                "isRoot": false,
                "uuid": "2d6d5d09-616f-45ff-9eff-e07f7c689488",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "found correct endpoint ",
                "fullTitle": "controller/server/http/router findRoute(request) found correct endpoint ",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/' })\nexpect(result.endpoint).to.be.equal('controller/dispatcher')",
                "err": {},
                "isRoot": false,
                "uuid": "770f67a0-c7a8-4c85-ad79-649d24dbc7c5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "overwrite the view",
                "fullTitle": "controller/server/http/router findRoute(request) overwrite the view",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/foo', method:'get' })\nexpect(result.view).to.be.equal('raw')",
                "err": {},
                "isRoot": false,
                "uuid": "7118b522-5fbc-4a32-9962-4670d69fbbb6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method policy routes correctly",
                "fullTitle": "controller/server/http/router findRoute(request) method policy routes correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/foo', method:'post' })\nexpect(result.test).to.be.equal(2)",
                "err": {},
                "isRoot": false,
                "uuid": "852930e9-3419-45b6-a43e-14ada40a97aa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method policy routes correctly, case test",
                "fullTitle": "controller/server/http/router findRoute(request) method policy routes correctly, case test",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/foo', method:'put' })\nexpect(result.test).to.be.equal(3)",
                "err": {},
                "isRoot": false,
                "uuid": "3adb4dd0-8693-4f21-9913-1368053583ee",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "no match should return an undefined endpoint",
                "fullTitle": "controller/server/http/router findRoute(request) no match should return an undefined endpoint",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/no-matching-pathname' })\nexpect(result.endpoint).to.be.equal(undefined)",
                "err": {},
                "isRoot": false,
                "uuid": "9709111e-a35d-44ef-b3e2-ee40ff7dde0c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "48f262a3-666f-4587-be9b-95b973486764",
              "20a7c073-0e93-4e9a-a831-8430b83fe92b",
              "4d4cd728-1225-45fd-b1c1-586190ec3c2a",
              "2d6d5d09-616f-45ff-9eff-e07f7c689488",
              "770f67a0-c7a8-4c85-ad79-649d24dbc7c5",
              "7118b522-5fbc-4a32-9962-4670d69fbbb6",
              "852930e9-3419-45b6-a43e-14ada40a97aa",
              "3adb4dd0-8693-4f21-9913-1368053583ee",
              "9709111e-a35d-44ef-b3e2-ee40ff7dde0c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c5cf5678-43f8-4acf-83fa-5c30f6013474",
        "title": "service locator tests",
        "fullFile": "/home/erik/Projects/@superhero/js.core/model/service-locator.test.js",
        "file": "/model/service-locator.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "service locator tests \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "sl = new SL\nsl.set('service', () => new class\n{\n  constructor()\n  {\n    this.i = 0\n  }\n  get foo()\n  {\n    return ++this.i\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "bbd51cfd-07bb-483b-8a20-2bd2974e0a10",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "loads a service",
            "fullTitle": "service locator tests loads a service",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const service = await sl.load('service')\nexpect(service.foo).to.be.equal(1)\nexpect(service.foo).to.be.equal(2)",
            "err": {},
            "isRoot": false,
            "uuid": "3a762260-ef70-452f-88cf-a97ff4e4b0a9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "loads the same instance",
            "fullTitle": "service locator tests loads the same instance",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const service1 = await sl.load('service')\nexpect(service1.foo).to.be.equal(1)\nconst service2 = await sl.load('service')\nexpect(service2.foo).to.be.equal(2)",
            "err": {},
            "isRoot": false,
            "uuid": "d3e1920e-c1d7-4876-b913-38bc7005e6af",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "throws an exception if the service has not been defined",
            "fullTitle": "service locator tests throws an exception if the service has not been defined",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "sl.load('none existing service')\n.then((service) => done(new Error('should not have loaded a service')))\n.catch((error)  =>\n{\n  expect(error.code).to.be.equal('ERR_SERVICE_FACTORY_UNDEFINED')\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "db566384-bce9-423c-a6fd-a9c83c6be1c7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "3a762260-ef70-452f-88cf-a97ff4e4b0a9",
          "d3e1920e-c1d7-4876-b913-38bc7005e6af",
          "db566384-bce9-423c-a6fd-a9c83c6be1c7"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0f27426b-7ef2-4757-b337-fdd9ffd5a984",
        "title": "controller/server/http",
        "fullFile": "/home/erik/Projects/@superhero/js.core/test/http.test.js",
        "file": "/test/http.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "controller/server/http \"before all\" hook",
            "timedOut": false,
            "duration": 11,
            "pass": false,
            "fail": false,
            "pending": false,
            "context": "{\n  \"title\": \"config\",\n  \"value\": {\n    \"routes\": [\n      {\n        \"chain\": [\n          \"controller/middleware-1\",\n          \"controller/middleware-2\"\n        ],\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"../controller/dispatcher/rest\",\n        \"policy\": \"/rest\",\n        \"args\": {}\n      },\n      {\n        \"view\": \"raw\",\n        \"endpoint\": \"controller/txt\",\n        \"policy\": \"/test-raw\",\n        \"args\": {}\n      },\n      {\n        \"view\": \"json\",\n        \"endpoint\": \"controller/obj\",\n        \"policy\": \"/test-json\",\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"controller/failing\",\n        \"policy\": \"/test-failing\",\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"controller/501\",\n        \"policy\": \"/test-501\",\n        \"args\": {}\n      },\n      {\n        \"view\": \"raw\",\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"controller/route-arg-foo\",\n        \"policy\": \"/test-route-arg-body\",\n        \"mapper\": {\n          \"foo\": {\n            \"body\": \"foo\"\n          }\n        },\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"controller/route-arg-foo\",\n        \"policy\": \"/test-route-arg-query\",\n        \"mapper\": {\n          \"foo\": {\n            \"query\": \"foo\"\n          }\n        },\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"controller/route-arg-foo\",\n        \"policy\": \"/bar/test-route-arg-segment\",\n        \"mapper\": {\n          \"foo\": {\n            \"segment\": 0\n          }\n        },\n        \"args\": {}\n      },\n      {\n        \"endpoint\": \"controller/route-arg-foo\",\n        \"policy\": \"/bar/test-route-arg-segment-by-number\",\n        \"mapper\": {\n          \"foo\": 0\n        },\n        \"args\": {}\n      },\n      {\n        \"view\": \"json\",\n        \"endpoint\": \"controller/route-enity\",\n        \"policy\": \"/test-route-entity\",\n        \"mapper\": {\n          \"foo\": {\n            \"body\": \"foo\"\n          },\n          \"bar\": {\n            \"body\": \"bar\"\n          },\n          \"baz\": {\n            \"body\": \"baz\"\n          }\n        },\n        \"args\": {}\n      }\n    ]\n  }\n}",
            "code": "const\nRequest = require('@superhero/request'),\nCore    = require('../'),\ncore    = new Core(config),\nport    = 9001\ncontext(this, { title:'config', value:config })\nrequest = new Request({ url:'http://localhost:' + port })\nserver  = core.server('http', config.routes)\nserver.on('listening', () => done())\nserver.listen(port)",
            "err": {},
            "isRoot": false,
            "uuid": "d00e647f-6e47-42ce-aca1-c0b8deafe34f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "controller/server/http \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "server.close()",
            "err": {},
            "isRoot": false,
            "uuid": "33966504-3bc1-4588-8b17-4f7750ddc9e4",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "testing the rest dispatcher",
            "fullTitle": "controller/server/http testing the rest dispatcher",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result =\n{\n  get     : await request.get('/rest'),\n  post    : await request.post('/rest'),\n  put     : await request.put('/rest'),\n  delete  : await request.delete('/rest')\n}\nexpect(result.get.status).to.be.equal(501)\nexpect(result.post.status).to.be.equal(501)\nexpect(result.put.status).to.be.equal(501)\nexpect(result.delete.status).to.be.equal(501)",
            "err": {},
            "isRoot": false,
            "uuid": "2e6356aa-8e1c-40fc-bf1b-7a33ba96dc28",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a raw text response",
            "fullTitle": "controller/server/http a raw text response",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-raw')\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('txt')",
            "err": {},
            "isRoot": false,
            "uuid": "af86af50-d3ff-4778-9656-791d1edbd4ec",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a json response",
            "fullTitle": "controller/server/http a json response",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-json')\nexpect(result.status).to.be.equal(200)\nexpect(result.data.foobar).to.be.equal('bazqux')",
            "err": {},
            "isRoot": false,
            "uuid": "bcf778ab-160b-4c65-a39c-229daa48e57e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a none specified endpoint should respond with a status:\"501\"",
            "fullTitle": "controller/server/http a none specified endpoint should respond with a status:\"501\"",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-501')\nexpect(result.status).to.be.equal(501)\nexpect(result.data).to.be.equal('Not Implemented')",
            "err": {},
            "isRoot": false,
            "uuid": "767564b3-8056-4cae-a419-412d1b0c4df7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a failing dispatcher",
            "fullTitle": "controller/server/http a failing dispatcher",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-failing')\nexpect(result.status).to.be.equal(500)\nexpect(result.data).to.be.equal('Internal Server Error')",
            "err": {},
            "isRoot": false,
            "uuid": "c3c554cf-6c3c-484a-b3ee-2593ff48880a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a none specified route returns a 404",
            "fullTitle": "controller/server/http a none specified route returns a 404",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/none-existing-path')\nexpect(result.status).to.be.equal(404)\nexpect(result.data).to.be.equal('Not Found')",
            "err": {},
            "isRoot": false,
            "uuid": "6d7c5c86-4793-4aec-87d2-80c36b7e6a6d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "route.arg body",
            "fullTitle": "controller/server/http route.arg body",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.post(\n{\n  url   : '/test-route-arg-body',\n  data  : { foo:'bar' }\n})\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('bar')",
            "err": {},
            "isRoot": false,
            "uuid": "304c67cd-7c20-48d3-8b6c-62b51368372f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "route.arg query",
            "fullTitle": "controller/server/http route.arg query",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.post('/test-route-arg-query?foo=bar')\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('bar')",
            "err": {},
            "isRoot": false,
            "uuid": "ef24be9c-c0d1-4981-9099-4a4312eb2887",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "route.arg segment",
            "fullTitle": "controller/server/http route.arg segment",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.post('/bar/test-route-arg-segment')\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('bar')",
            "err": {},
            "isRoot": false,
            "uuid": "8c406581-4d75-40d4-ab08-4786aa1ff02c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "route.arg segment by number",
            "fullTitle": "controller/server/http route.arg segment by number",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.post('/bar/test-route-arg-segment-by-number')\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('bar')",
            "err": {},
            "isRoot": false,
            "uuid": "40de2944-96a2-4c36-88bb-f3e122b5ed9d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "route.entity",
            "fullTitle": "controller/server/http route.entity",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.post(\n{\n  url   : '/test-route-entity',\n  data  :\n  {\n    foo : 'foo',\n    bar : 'bar',\n    baz : 'baz'\n  }\n})\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.deep.equal(\n{\n  foo : 'foo',\n  bar : 'bar',\n  baz : 'baz'\n})",
            "err": {},
            "isRoot": false,
            "uuid": "4c2d6fae-e39d-4f08-8fde-cee253652f73",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "2e6356aa-8e1c-40fc-bf1b-7a33ba96dc28",
          "af86af50-d3ff-4778-9656-791d1edbd4ec",
          "bcf778ab-160b-4c65-a39c-229daa48e57e",
          "767564b3-8056-4cae-a419-412d1b0c4df7",
          "c3c554cf-6c3c-484a-b3ee-2593ff48880a",
          "6d7c5c86-4793-4aec-87d2-80c36b7e6a6d",
          "304c67cd-7c20-48d3-8b6c-62b51368372f",
          "ef24be9c-c0d1-4981-9099-4a4312eb2887",
          "8c406581-4d75-40d4-ab08-4786aa1ff02c",
          "40de2944-96a2-4c36-88bb-f3e122b5ed9d",
          "4c2d6fae-e39d-4f08-8fde-cee253652f73"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 33,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e1b21f78-9340-4868-8583-db9ebc6bd856",
        "title": "view/json",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/json.test.js",
        "file": "/view/json.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "view/json \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Json = require('./json')\njson = new Json()",
            "err": {},
            "isRoot": false,
            "uuid": "924fb472-e002-4a48-827b-cbce06a456ac",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e9e8555f-fb86-423d-9f41-bbced191b838",
            "title": "compose(vm)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/view/json.test.js",
            "file": "/view/json.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a stringified value of `vm.body`",
                "fullTitle": "view/json compose(vm) should return a stringified value of `vm.body`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"view model\",\n  \"value\": {\n    \"body\": {\n      \"foo\": \"bar\"\n    },\n    \"headers\": {\n      \"content-type\": \"application/json\"\n    }\n  }\n}",
                "code": "context(this, { title:'view model', value:vm })\nexpect(json.compose(vm)).to.be.equal(JSON.stringify(vm.body))",
                "err": {},
                "isRoot": false,
                "uuid": "0fdc4ce6-758b-4c59-9d42-96decfdf0826",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set the `vm.headers[\"content-type\"]` to \"application/json\"",
                "fullTitle": "view/json compose(vm) should set the `vm.headers[\"content-type\"]` to \"application/json\"",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"view model\",\n  \"value\": {\n    \"body\": {\n      \"foo\": \"bar\"\n    },\n    \"headers\": {\n      \"content-type\": \"application/json\"\n    }\n  }\n}",
                "code": "context(this, { title:'view model', value:vm })\nexpect(vm.headers['content-type']).to.be.equal('application/json')",
                "err": {},
                "isRoot": false,
                "uuid": "cd31c30b-ec33-43a2-83a6-bf140d5ed032",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "expected a stringified version of the `vm.body`",
                "fullTitle": "view/json compose(vm) expected a stringified version of the `vm.body`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"view model\",\n  \"value\": {\n    \"body\": {\n      \"foo\": \"bar\"\n    },\n    \"headers\": {\n      \"content-type\": \"application/json\"\n    }\n  }\n}",
                "code": "context(this, { title:'view model', value:vm })\nexpect(json.compose(vm)).to.be.equal(JSON.stringify(vm.body))",
                "err": {},
                "isRoot": false,
                "uuid": "aaefbba8-c414-455f-86fe-4f88a2db106e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0fdc4ce6-758b-4c59-9d42-96decfdf0826",
              "cd31c30b-ec33-43a2-83a6-bf140d5ed032",
              "aaefbba8-c414-455f-86fe-4f88a2db106e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b6dcc09f-7c75-41c1-8e89-e3101fb04f38",
        "title": "view/raw",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/raw.test.js",
        "file": "/view/raw.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "view/raw \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Raw = require('./raw')\nraw = new Raw()",
            "err": {},
            "isRoot": false,
            "uuid": "4b406cd2-c83b-4071-b060-95d1568b7b01",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b368da62-6d2f-497a-a0cb-e08ef8fd4fe6",
            "title": "compose(vm)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/view/raw.test.js",
            "file": "/view/raw.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the value of `vm.body`",
                "fullTitle": "view/raw compose(vm) should return the value of `vm.body`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"view model\",\n  \"value\": {\n    \"body\": \"foobar\"\n  }\n}",
                "code": "context(this, { title:'view model', value:vm })\nexpect(raw.compose(vm)).to.be.equal(vm.body)",
                "err": {},
                "isRoot": false,
                "uuid": "9732ecac-e572-491f-8cdd-5e655f983bf1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9732ecac-e572-491f-8cdd-5e655f983bf1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}