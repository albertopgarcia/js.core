{
  "stats": {
    "suites": 35,
    "tests": 62,
    "passes": 62,
    "pending": 0,
    "failures": 0,
    "start": "2018-06-05T09:48:26.758Z",
    "end": "2018-06-05T09:48:26.833Z",
    "duration": 75,
    "testsRegistered": 62,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "6edd4013-dd81-4df0-9b26-2ec6a855c722",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "3be654c1-2841-4798-8e3b-04aaaddef00c",
        "title": "acl",
        "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
        "file": "/acl/index.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5e6e6536-74a4-42d8-b72b-f1a7c2037d31",
            "title": "from(roles)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to create an instance from a configured json",
                "fullTitle": "acl from(roles) should be able to create an instance from a configured json",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"acl.roles\",\n  \"value\": {\n    \"foo\": {\n      \"users\": [\n        \"foobar\",\n        \"bazqux\"\n      ],\n      \"children\": [],\n      \"resources\": {\n        \"res-1\": [\n          \"perm-1-1\"\n        ],\n        \"res-2\": [\n          \"perm-2-1\",\n          \"perm-2-2\"\n        ]\n      }\n    },\n    \"bar\": {\n      \"users\": [\n        \"foobaz\"\n      ],\n      \"children\": [\n        \"foo\",\n        \"baz\"\n      ],\n      \"resources\": {}\n    },\n    \"baz\": {\n      \"users\": [],\n      \"children\": [],\n      \"resources\": {\n        \"res-0\": [],\n        \"res-1\": [\n          \"perm-1-1\",\n          \"perm-1-2\",\n          \"perm-1-3\"\n        ]\n      }\n    }\n  }\n}",
                "code": "const acl = new Acl\nacl.addRoleUser('foo', 'foobar')\nacl.addRoleUser('foo', 'bazqux')\nacl.addRoleUser('bar', 'foobaz')\nacl.addRoleChild('bar', 'foo')\nacl.addRoleChild('bar', 'baz')\nacl.addRoleResource('baz', 'res-0')\nacl.addRoleResourcePermission('foo', 'res-1', 'perm-1-1')\nacl.addRoleResourcePermission('foo', 'res-2', 'perm-2-1')\nacl.addRoleResourcePermission('foo', 'res-2', 'perm-2-2')\nacl.addRoleResourcePermission('baz', 'res-1', 'perm-1-1')\nacl.addRoleResourcePermission('baz', 'res-1', 'perm-1-2')\nacl.addRoleResourcePermission('baz', 'res-1', 'perm-1-3')\ncontext(this, { title:'acl.roles', value:acl.roles })\nexpect(Acl.from(acl.roles).roles).to.deep.equal(acl.roles)",
                "err": {},
                "isRoot": false,
                "uuid": "bf3d8dcc-9f90-4b4e-95c1-caea2afea5ee",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw an error if there is an invalid key in the arg",
                "fullTitle": "acl from(roles) should throw an error if there is an invalid key in the arg",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(Acl.from.bind(null, { foo:{ bar:'baz' } })).to.throw(Error)",
                "err": {},
                "isRoot": false,
                "uuid": "6c32d814-f5bc-4317-979f-3085c7e27b5c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bf3d8dcc-9f90-4b4e-95c1-caea2afea5ee",
              "6c32d814-f5bc-4317-979f-3085c7e27b5c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "97962d62-a826-40cc-817d-fd0e22ce4c4d",
            "title": "hasRole(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not find a role not previously added",
                "fullTitle": "acl hasRole(role) should not find a role not previously added",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'role'\nexpect(acl.hasRole(role)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "d6da2814-18ee-4e58-ae60-081483d44a06",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be able to find an existing role",
                "fullTitle": "acl hasRole(role) should be able to find an existing role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'role'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "41de8d69-7bc2-40d2-85ce-0067d75b038c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d6da2814-18ee-4e58-ae60-081483d44a06",
              "41de8d69-7bc2-40d2-85ce-0067d75b038c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2fb3a414-0782-4c47-9b22-dc57c247a448",
            "title": "addRole(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a role",
                "fullTitle": "acl addRole(role) should be able to add a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'role'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "b7d701d8-bfc4-48e7-bfe8-1b4035468814",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adding the same role multiple times wont reset it",
                "fullTitle": "acl addRole(role) adding the same role multiple times wont reset it",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nuser  = 'bar'\nacl.addRole(role)\nacl.addRoleUser(role, user)\nacl.addRole(role)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "2afd827d-aabc-46b5-a20d-f28cffd3a326",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b7d701d8-bfc4-48e7-bfe8-1b4035468814",
              "2afd827d-aabc-46b5-a20d-f28cffd3a326"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f3f191b1-6ae0-4b8c-a5d5-95a68db2c85c",
            "title": "removeRole(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "removing a non existing role wont throw",
                "fullTitle": "acl removeRole(role) removing a non existing role wont throw",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo'\nexpect(acl.removeRole.bind(acl, role)).to.not.throw()",
                "err": {},
                "isRoot": false,
                "uuid": "af597de7-876e-40dc-a53f-77232ac0acb3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removing an existing role to be removed",
                "fullTitle": "acl removeRole(role) removing an existing role to be removed",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo'\nacl.addRole(role)\nexpect(acl.hasRole(role)).to.be.equal(true)\nacl.removeRole(role)\nexpect(acl.hasRole(role)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "df1c48bf-bc99-4480-af46-2af5d998208a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "af597de7-876e-40dc-a53f-77232ac0acb3",
              "df1c48bf-bc99-4480-af46-2af5d998208a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "be594bb8-9b2d-4aee-9d6f-658545628ec7",
            "title": "hasRoleChild(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return false if child is not child of role",
                "fullTitle": "acl hasRoleChild(role, child) should return false if child is not child of role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)\nacl.addRole(child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "e497c65e-8981-4a51-8f05-eb42d132c796",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be able to find a child of a role",
                "fullTitle": "acl hasRoleChild(role, child) should be able to find a child of a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nacl.addRoleChild(role, child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "82d0bcac-c9f8-457a-93c5-22d833a43c67",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e497c65e-8981-4a51-8f05-eb42d132c796",
              "82d0bcac-c9f8-457a-93c5-22d833a43c67"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "75f7aec1-a131-4a1b-85c0-752ad5108241",
            "title": "hasRoleChildRecursively(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return false if child does not derive from role",
                "fullTitle": "acl hasRoleChildRecursively(role, child) should return false if child does not derive from role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl           = new Acl,\nrole          = 'foo',\nchild         = 'bar',\nchildOfChild  = 'baz'\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRole(child)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRole(childOfChild)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)\nacl.addRoleChild(role, child)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "78983878-40f4-4865-b068-d1be0cc39147",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return true if child derives from role",
                "fullTitle": "acl hasRoleChildRecursively(role, child) should return true if child derives from role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl           = new Acl,\nrole          = 'foo',\nchild         = 'bar',\nchildOfChild  = 'baz'\nacl.addRoleChild(role, child)\nacl.addRoleChild(child, childOfChild)\nexpect(acl.hasRoleChildRecursively(role, childOfChild)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "18663813-46a1-4b69-8771-8749e98b8bec",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "78983878-40f4-4865-b068-d1be0cc39147",
              "18663813-46a1-4b69-8771-8749e98b8bec"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "faa2418e-4818-4432-a4e8-ce489c062c42",
            "title": "addRoleChild(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a child to a role",
                "fullTitle": "acl addRoleChild(role, child) should be able to add a child to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nacl.addRoleChild(role, child)\nexpect(acl.hasRole(role)).to.be.equal(true)\nexpect(acl.hasRole(child)).to.be.equal(true)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "75e05518-5147-4bfa-83cb-09e2c5709e5d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "75e05518-5147-4bfa-83cb-09e2c5709e5d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c6e65c58-f8ad-4d07-80e6-5fbfa3cefb1a",
            "title": "removeRoleChild(role, child)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a child from a role",
                "fullTitle": "acl removeRoleChild(role, child) should be able to remove a child from a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nchild = 'bar'\nacl.addRoleChild(role, child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(true)\nacl.removeRoleChild(role, child)\nexpect(acl.hasRoleChild(role, child)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "27e73e71-b07c-494b-905c-63402339a485",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "27e73e71-b07c-494b-905c-63402339a485"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1dec354e-95dd-4557-aca9-a24539b53dc4",
            "title": "hasRoleUser(role, user)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true only if role has user",
                "fullTitle": "acl hasRoleUser(role, user) should return true only if role has user",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "8fa3a8b6-8ad1-4dde-96e9-54205804327f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8fa3a8b6-8ad1-4dde-96e9-54205804327f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e03b01e8-ebf1-4bca-a359-4ce9eb356201",
            "title": "addRoleUser(role user)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "adding a user to a role also creates the role",
                "fullTitle": "acl addRoleUser(role user) adding a user to a role also creates the role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "860b5a4d-b970-4614-b09c-7a52dfc3b973",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be able to add a user to a role",
                "fullTitle": "acl addRoleUser(role user) should be able to add a user to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "c8782328-f4f0-4017-a732-ae7f20bb8317",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "860b5a4d-b970-4614-b09c-7a52dfc3b973",
              "c8782328-f4f0-4017-a732-ae7f20bb8317"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b626c1be-a29a-496b-96cd-4ec340f182ae",
            "title": "removeRoleUser(role, user)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a user from a role",
                "fullTitle": "acl removeRoleUser(role, user) should be able to remove a user from a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl  = new Acl,\nrole = 'foo',\nuser = 'bar'\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)\nacl.addRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(true)\nacl.removeRoleUser(role, user)\nexpect(acl.hasRoleUser(role, user)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "1d454289-27d5-4a87-a46d-1e4fcc56a38e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1d454289-27d5-4a87-a46d-1e4fcc56a38e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d3608b8a-fe3a-4d21-8298-8cd3dae794fb",
            "title": "removeUser(user)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a user from all roles",
                "fullTitle": "acl removeUser(user) should be able to remove a user from all roles",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole1 = 'foo',\nrole2 = 'bar',\nrole3 = 'baz',\nuser  = 'qux'\nacl.addRoleUser(role1, user)\nacl.addRoleUser(role2, user)\nexpect(acl.hasRoleUser(role1, user)).to.be.equal(true)\nexpect(acl.hasRoleUser(role2, user)).to.be.equal(true)\nexpect(acl.hasRoleUser(role3, user)).to.be.equal(false)\nacl.removeUser(user)\nexpect(acl.hasRoleUser(role1, user)).to.be.equal(false)\nexpect(acl.hasRoleUser(role2, user)).to.be.equal(false)\nexpect(acl.hasRoleUser(role3, user)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "e29ee9f8-2809-4a0b-bdb1-c8fddcbc2ffb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e29ee9f8-2809-4a0b-bdb1-c8fddcbc2ffb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5a186411-bf1c-47b0-9a1d-95ff374870a0",
            "title": "hasRoleResource(role, resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true only if the role has the resource",
                "fullTitle": "acl hasRoleResource(role, resource) should return true only if the role has the resource",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(false)\nacl.addRoleResource(role, resource)\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "2adf7e3c-0f0e-46c7-9c95-e17fd8ca43ac",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2adf7e3c-0f0e-46c7-9c95-e17fd8ca43ac"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f8bf6add-123a-4a8a-9620-7f5767899c1f",
            "title": "addRoleResource(role, resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a resource to a role",
                "fullTitle": "acl addRoleResource(role, resource) should be able to add a resource to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(false)\nacl.addRoleResource(role, resource)\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "e9cb0986-da22-4c19-b838-958c52b81851",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e9cb0986-da22-4c19-b838-958c52b81851"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "60cdc449-d255-4323-ad28-f2b9eb153c7c",
            "title": "removeRoleResource(role, resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a resource from a role",
                "fullTitle": "acl removeRoleResource(role, resource) should be able to remove a resource from a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(false)\nacl.addRoleResource(role, resource)\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(true)\nacl.removeRoleResource(role, resource)\nexpect(acl.hasRoleResource(role, resource)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "f879e967-05c9-4753-a514-bb69ba3ea5b8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removing a resource from a role should not remove the role",
                "fullTitle": "acl removeRoleResource(role, resource) removing a resource from a role should not remove the role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole      = 'foo',\nresource  = 'bar'\nacl.addRoleResource(role, resource)\nacl.removeRoleResource(role, resource)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "66e5f3bb-984f-4b95-a133-ec34300cdda6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f879e967-05c9-4753-a514-bb69ba3ea5b8",
              "66e5f3bb-984f-4b95-a133-ec34300cdda6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "61d7ec1e-7858-4e7c-8d93-b43e4c0b927a",
            "title": "removeResource(resource)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to remove a resource from all roles",
                "fullTitle": "acl removeResource(resource) should be able to remove a resource from all roles",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole1     = 'foo',\nrole2     = 'bar',\nrole3     = 'baz',\nresource  = 'qux'\nacl.addRole(role1)\nacl.addRoleResource(role2, resource)\nacl.addRoleResource(role3, resource)\nexpect(acl.hasRoleResource(role1, resource)).to.be.equal(false)\nexpect(acl.hasRoleResource(role2, resource)).to.be.equal(true)\nexpect(acl.hasRoleResource(role3, resource)).to.be.equal(true)\nacl.removeResource(resource)\nexpect(acl.hasRoleResource(role1, resource)).to.be.equal(false)\nexpect(acl.hasRoleResource(role2, resource)).to.be.equal(false)\nexpect(acl.hasRoleResource(role3, resource)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "9f6395b8-f456-47b2-ae65-b4dba3f6eef0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9f6395b8-f456-47b2-ae65-b4dba3f6eef0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "eb8575fe-bdfe-4d8a-914d-1705e855882c",
            "title": "hasRoleResourcePermission(role, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return true only if the role has the permission",
                "fullTitle": "acl hasRoleResourcePermission(role, resource, permission) should return true only if the role has the permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(false)\nacl.addRole(role)\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(false)\nacl.addRoleResource(role, res)\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(false)\nacl.addRoleResourcePermission(role, res, per)\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "919b7124-23d0-4f6e-95f1-90b243301023",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "919b7124-23d0-4f6e-95f1-90b243301023"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "a341e609-70ca-4556-83bf-781236b99ef0",
            "title": "addRoleResourcePermission(role, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be able to add a permission to a role",
                "fullTitle": "acl addRoleResourcePermission(role, resource, permission) should be able to add a permission to a role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(false)\nacl.addRoleResourcePermission(role, res, per)\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "f4905cc5-fa01-4b49-8688-c8acc54c75bc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add a resource to the role",
                "fullTitle": "acl addRoleResourcePermission(role, resource, permission) should add a resource to the role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRoleResource(role, res)).to.be.equal(false)\nacl.addRoleResourcePermission(role, res, per)\nexpect(acl.hasRoleResource(role, res)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "29764e1d-5600-40f9-9489-c74fd9f7dd68",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add a role",
                "fullTitle": "acl addRoleResourcePermission(role, resource, permission) should add a role",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nexpect(acl.hasRole(role)).to.be.equal(false)\nacl.addRoleResourcePermission(role, res, per)\nexpect(acl.hasRole(role)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "512fa376-4930-4193-8d42-e293828785d4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f4905cc5-fa01-4b49-8688-c8acc54c75bc",
              "29764e1d-5600-40f9-9489-c74fd9f7dd68",
              "512fa376-4930-4193-8d42-e293828785d4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c6c34dc1-ff16-4fa7-a6d9-3ba7f6b9eae0",
            "title": "removeRoleResourcePermission(role, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a permission from a role resource",
                "fullTitle": "acl removeRoleResourcePermission(role, resource, permission) should remove a permission from a role resource",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole  = 'foo',\nres   = 'bar',\nper   = 'baz'\nacl.addRoleResourcePermission(role, res, per)\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(true)\nacl.removeRoleResourcePermission(role, res, per)\nexpect(acl.hasRoleResourcePermission(role, res, per)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "7ccc3030-6f8d-4b61-a4fe-1d131f55b3b9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7ccc3030-6f8d-4b61-a4fe-1d131f55b3b9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7102e19b-c3f8-4f81-82e6-5578f24a5d7d",
            "title": "removeResourcePermission(resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a permission from a resource on all roles",
                "fullTitle": "acl removeResourcePermission(resource, permission) should remove a permission from a resource on all roles",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole1 = 'foo1',\nrole2 = 'foo2',\nrole3 = 'foo3',\nres   = 'bar',\nper   = 'baz'\nacl.addRoleResource(role1, res)\nacl.addRoleResourcePermission(role2, res, per)\nacl.addRoleResourcePermission(role3, res, per)\nexpect(acl.hasRoleResourcePermission(role1, res, per)).to.be.equal(false)\nexpect(acl.hasRoleResourcePermission(role2, res, per)).to.be.equal(true)\nexpect(acl.hasRoleResourcePermission(role3, res, per)).to.be.equal(true)\nacl.removeResourcePermission(res, per)\nexpect(acl.hasRoleResourcePermission(role1, res, per)).to.be.equal(false)\nexpect(acl.hasRoleResourcePermission(role2, res, per)).to.be.equal(false)\nexpect(acl.hasRoleResourcePermission(role3, res, per)).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "69eb90fb-cc9e-45ac-b4f6-1995050472df",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not remove the role and resouce",
                "fullTitle": "acl removeResourcePermission(resource, permission) should not remove the role and resouce",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nrole1 = 'foo1',\nrole2 = 'foo2',\nrole3 = 'foo3',\nres   = 'bar',\nper   = 'baz'\nacl.addRoleResource(role1, res)\nacl.addRoleResourcePermission(role2, res, per)\nacl.addRoleResourcePermission(role3, res, per)\nacl.removeResourcePermission(res, per)\nexpect(acl.hasRoleResource(role1, res, per)).to.be.equal(true)\nexpect(acl.hasRoleResource(role2, res, per)).to.be.equal(true)\nexpect(acl.hasRoleResource(role3, res, per)).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "5f3af948-6f10-48bd-bb40-4fc4831e9b0f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "69eb90fb-cc9e-45ac-b4f6-1995050472df",
              "5f3af948-6f10-48bd-bb40-4fc4831e9b0f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "60e769ca-3182-4bce-862e-4ea2a7218852",
            "title": "getUserRoles(user)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of all the roles a user have",
                "fullTitle": "acl getUserRoles(user) should return a list of all the roles a user have",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl   = new Acl,\nuser  = 'foobar',\nrole1 = 'foo',\nrole2 = 'bar',\nrole3 = 'baz',\nrole4 = 'qux'\nacl.addRoleUser(role1, user)\nacl.addRoleUser(role2, user)\nacl.addRoleChild(role1, role3)\nacl.addRoleChild(role2, role4)\nexpect(acl.getUserRoles(user)).to.have.members([role1, role2])",
                "err": {},
                "isRoot": false,
                "uuid": "cd991913-5f56-4f23-ae52-9dbef457efe1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cd991913-5f56-4f23-ae52-9dbef457efe1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "20f2c4bc-1857-4f5f-9ca9-49dcb114555f",
            "title": "getUserRolesRecursive(user)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of roles and the derieved roles a user have",
                "fullTitle": "acl getUserRolesRecursive(user) should return a list of roles and the derieved roles a user have",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nuser1     = 'foobar1',\nuser2     = 'foobar2',\nrole1     = 'foo',\nrole2     = 'bar',\nrole3     = 'baz',\nrole4     = 'qux',\nexpected  = [role1, role2, role3]\nacl.addRoleUser(role1, user1)\nacl.addRoleUser(role2, user1)\nacl.addRoleChild(role1, role3)\nacl.addRole(role4)\nexpect(acl.getUserRolesRecursively(user1)).to.have.members(expected)\nacl.addRoleUser(role4, user2)\nexpect(acl.getUserRolesRecursively(user1)).to.have.members(expected)",
                "err": {},
                "isRoot": false,
                "uuid": "4891e931-b0f6-4127-a138-3924f6ad7831",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4891e931-b0f6-4127-a138-3924f6ad7831"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0646e5d1-20b3-444f-a4f8-055aab6d9720",
            "title": "getRolesRecursively(role)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of roles derieved of the root role",
                "fullTitle": "acl getRolesRecursively(role) should return a list of roles derieved of the root role",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl       = new Acl,\nrole1     = 'foo',\nrole2     = 'bar',\nrole3     = 'baz',\nrole4     = 'qux',\nexpected  = [role1, role3]\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleChild(role1, role3)\nexpect(acl.getRolesRecursively(role1)).to.have.members(expected)\nacl.addRole(role4)\nexpect(acl.getRolesRecursively(role1)).to.have.members(expected)",
                "err": {},
                "isRoot": false,
                "uuid": "edb58e1e-c171-4784-b1a6-2cb2be97f3ce",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "edb58e1e-c171-4784-b1a6-2cb2be97f3ce"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c70c2560-c22b-4129-83a4-eb124c184e3b",
            "title": "isUserAuthorized(user, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only allow a valid permission",
                "fullTitle": "acl isUserAuthorized(user, resource, permission) should only allow a valid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nuser        = 'foo',\nrole        = 'bar',\nresource    = 'baz',\npermission  = 'qux'\nacl.addRoleUser(role, user)\nacl.addRoleResourcePermission(role, resource, permission)\nconst result = acl.isUserAuthorized(user, resource, permission)\nexpect(result).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "2227dfd7-1638-4f6d-a64e-d85f6a7db6a1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow a valid permission through a role hierarchy",
                "fullTitle": "acl isUserAuthorized(user, resource, permission) should allow a valid permission through a role hierarchy",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nuser1       = 'foo1',\nuser2       = 'foo2',\nrole1       = 'bar1',\nrole2       = 'bar2',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRoleUser(role1, user1)\nacl.addRoleUser(role2, user2)\nacl.addRoleResourcePermission(role1, resource1, permission)\nacl.addRoleResourcePermission(role2, resource2, permission)\nconst result1 = acl.isUserAuthorized(user1, resource2, permission)\nexpect(result1).to.be.equal(false)\nacl.addRoleChild(role1, role2)\nconst result2 = acl.isUserAuthorized(user1, resource2, permission)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "be2280bb-b734-4bc0-a2c5-b8bf39d82c51",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow an invalid permission",
                "fullTitle": "acl isUserAuthorized(user, resource, permission) should not allow an invalid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nuser1       = 'foo1',\nuser2       = 'foo2',\nrole1       = 'bar1',\nrole2       = 'bar2',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRoleUser(role1, user1)\nacl.addRoleUser(role2, user2)\nacl.addRoleResourcePermission(role1, resource1, permission)\nacl.addRoleResourcePermission(role2, resource2, permission)\nconst result1 = acl.isUserAuthorized(user1, resource1, permission)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isUserAuthorized(user1, resource2, permission)\nexpect(result2).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "91610af6-a2ae-4ab9-8f31-0a0a81a663c9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2227dfd7-1638-4f6d-a64e-d85f6a7db6a1",
              "be2280bb-b734-4bc0-a2c5-b8bf39d82c51",
              "91610af6-a2ae-4ab9-8f31-0a0a81a663c9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0bdaf543-ba26-4bf5-bd6c-cad5801c8529",
            "title": "isRoleAuthorized(role, resource, permission)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/acl/index.test.js",
            "file": "/acl/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only allow a valid permission",
                "fullTitle": "acl isRoleAuthorized(role, resource, permission) should only allow a valid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole        = 'bar',\nresource    = 'baz',\npermission  = 'qux'\nacl.addRole(role)\nacl.addRoleResourcePermission(role, resource, permission)\nconst result = acl.isRoleAuthorized(role, resource, permission)\nexpect(result).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "70b260f3-53db-470d-b3bf-ea10f407e0d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow a valid permission through a role hierarchy",
                "fullTitle": "acl isRoleAuthorized(role, resource, permission) should allow a valid permission through a role hierarchy",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\nrole2       = 'bar2',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleResourcePermission(role1, resource1, permission)\nacl.addRoleResourcePermission(role2, resource2, permission)\nconst result1 = acl.isRoleAuthorized(role1, resource2, permission)\nexpect(result1).to.be.equal(false)\nacl.addRoleChild(role1, role2)\nconst result2 = acl.isRoleAuthorized(role1, resource2, permission)\nexpect(result2).to.be.equal(true)",
                "err": {},
                "isRoot": false,
                "uuid": "1dadba94-4e05-4965-b7c5-0223dd0608ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow an invalid permission",
                "fullTitle": "acl isRoleAuthorized(role, resource, permission) should not allow an invalid permission",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nacl         = new Acl,\nrole1       = 'bar1',\nrole2       = 'bar2',\nresource1   = 'baz1',\nresource2   = 'baz2',\npermission  = 'qux'\nacl.addRole(role1)\nacl.addRole(role2)\nacl.addRoleResourcePermission(role1, resource1, permission)\nacl.addRoleResourcePermission(role2, resource2, permission)\nconst result1 = acl.isRoleAuthorized(role1, resource1, permission)\nexpect(result1).to.be.equal(true)\nconst result2 = acl.isRoleAuthorized(role1, resource2, permission)\nexpect(result2).to.be.equal(false)",
                "err": {},
                "isRoot": false,
                "uuid": "7f72b8e5-b737-4571-ac0a-0bcc3303f22c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "70b260f3-53db-470d-b3bf-ea10f407e0d5",
              "1dadba94-4e05-4965-b7c5-0223dd0608ab",
              "7f72b8e5-b737-4571-ac0a-0bcc3303f22c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4b8998f5-fc8c-4303-8590-0cfe1b6c0575",
        "title": "controller/server/http/router",
        "fullFile": "/home/erik/Projects/@superhero/js.core/controller/router/index.test.js",
        "file": "/controller/router/index.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "controller/server/http/router \"before all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"config\",\n    \"value\": {\n      \"mainDirectory\": \"/home/erik/Projects/@superhero/js.core/test\"\n    }\n  },\n  {\n    \"title\": \"routes\",\n    \"value\": [\n      {\n        \"chain\": \"controller/dispatcher/rest\"\n      },\n      {\n        \"view\": \"json\"\n      },\n      {\n        \"policy\": \"/\",\n        \"endpoint\": \"controller/dispatcher\"\n      },\n      {\n        \"policy\": {\n          \"path\": \"/foo\",\n          \"method\": \"post\"\n        },\n        \"endpoint\": \"controller/dispatcher\"\n      },\n      {\n        \"view\": \"raw\",\n        \"policy\": \"/foo\",\n        \"endpoint\": \"controller/dispatcher/rest\",\n        \"chain\": \"controller/dispatcher\"\n      }\n    ]\n  }\n]",
            "code": "context(this, { title:'config', value:config })\ncontext(this, { title:'routes', value:routes })\nRouter = require('.')\nrouter = new Router(config, routes)",
            "err": {},
            "isRoot": false,
            "uuid": "48f66620-b045-4a97-9d76-cf4749b791c5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7fd21635-2706-4f3b-8e9b-19fc34941a66",
            "title": "composeRoute(routes)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/controller/router/index.test.js",
            "file": "/controller/router/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a flatten route",
                "fullTitle": "controller/server/http/router composeRoute(routes) should return a flatten route",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"routes\",\n  \"value\": [\n    {\n      \"chain\": \"controller/dispatcher/rest\"\n    },\n    {\n      \"view\": \"json\"\n    },\n    {\n      \"policy\": \"/\",\n      \"endpoint\": \"controller/dispatcher\"\n    },\n    {\n      \"policy\": {\n        \"path\": \"/foo\",\n        \"method\": \"post\"\n      },\n      \"endpoint\": \"controller/dispatcher\"\n    },\n    {\n      \"view\": \"raw\",\n      \"policy\": \"/foo\",\n      \"endpoint\": \"controller/dispatcher/rest\",\n      \"chain\": \"controller/dispatcher\"\n    }\n  ]\n}",
                "code": "context(this, { title:'routes', value:routes })\nconst route = router.composeRoute(routes)\nexpect(route.view).to.be.equal('json')\nexpect(route.policy).to.be.equal('/')\nexpect(route.endpoint).to.be.equal('controller/dispatcher')\nexpect(route.chain.length).to.be.equal(1)",
                "err": {},
                "isRoot": false,
                "uuid": "b4c3e770-02b7-4743-9102-d19eba2ae180",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b4c3e770-02b7-4743-9102-d19eba2ae180"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ba68ec04-d60f-46a2-924c-3244cb4cf688",
            "title": "findRoute(request)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/controller/router/index.test.js",
            "file": "/controller/router/index.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "chain is an array",
                "fullTitle": "controller/server/http/router findRoute(request) chain is an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ url:{ pathname:'/' }})\nexpect(result.chain).is.an('array')",
                "err": {},
                "isRoot": false,
                "uuid": "b4175ca4-5d49-49eb-928a-9fde19eb9c30",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "chain builds on",
                "fullTitle": "controller/server/http/router findRoute(request) chain builds on",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/' })\nexpect(result.chain.length).to.be.equal(1)",
                "err": {},
                "isRoot": false,
                "uuid": "ca85160f-ccd4-4b9f-acea-d2d12d6904f0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "chain routes correctly",
                "fullTitle": "controller/server/http/router findRoute(request) chain routes correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/foo' })\nexpect(result.chain.length).to.be.equal(2)",
                "err": {},
                "isRoot": false,
                "uuid": "80548566-959d-4e3a-81fe-b6cb7b8aabf7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "view is inherited",
                "fullTitle": "controller/server/http/router findRoute(request) view is inherited",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/' })\nexpect(result.view).to.be.equal('json')",
                "err": {},
                "isRoot": false,
                "uuid": "be56a249-a2a9-47a9-bb7d-2327e8341bef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "found correct endpoint ",
                "fullTitle": "controller/server/http/router findRoute(request) found correct endpoint ",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/' })\nexpect(result.endpoint).to.be.equal('controller/dispatcher')",
                "err": {},
                "isRoot": false,
                "uuid": "6732cd59-3c6b-4b9e-884f-90f853849c09",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "overwrite the view",
                "fullTitle": "controller/server/http/router findRoute(request) overwrite the view",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/foo', method:'get' })\nexpect(result.view).to.be.equal('raw')",
                "err": {},
                "isRoot": false,
                "uuid": "d3710754-5da4-4618-b7db-deadcc90f4f0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method policy routes correctly",
                "fullTitle": "controller/server/http/router findRoute(request) method policy routes correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/foo', method:'post' })\nexpect(result.endpoint).to.be.equal('controller/dispatcher')",
                "err": {},
                "isRoot": false,
                "uuid": "124f6761-0613-4ac8-8aad-0789508713fc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "no match should return an undefined endpoint",
                "fullTitle": "controller/server/http/router findRoute(request) no match should return an undefined endpoint",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = router.findRoute({ path:'/no-matching-pathname' })\nexpect(result.endpoint).to.be.equal(undefined)",
                "err": {},
                "isRoot": false,
                "uuid": "38fc8915-3476-47ef-a925-3d703da66d03",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b4175ca4-5d49-49eb-928a-9fde19eb9c30",
              "ca85160f-ccd4-4b9f-acea-d2d12d6904f0",
              "80548566-959d-4e3a-81fe-b6cb7b8aabf7",
              "be56a249-a2a9-47a9-bb7d-2327e8341bef",
              "6732cd59-3c6b-4b9e-884f-90f853849c09",
              "d3710754-5da4-4618-b7db-deadcc90f4f0",
              "124f6761-0613-4ac8-8aad-0789508713fc",
              "38fc8915-3476-47ef-a925-3d703da66d03"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2dd2cdb2-8c4d-4c55-9abe-a492670f529e",
        "title": "service locator tests",
        "fullFile": "/home/erik/Projects/@superhero/js.core/model/service-locator.test.js",
        "file": "/model/service-locator.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "service locator tests \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "sl = new SL\nsl.add('service', () => new class\n{\n  constructor()\n  {\n    this.i = 0\n  }\n  get foo()\n  {\n    return ++this.i\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "d5dd23fe-0d78-4fad-96ec-e10fd546acc9",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "loads a service",
            "fullTitle": "service locator tests loads a service",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const service = await sl.load('service')\nexpect(service.foo).to.be.equal(1)\nexpect(service.foo).to.be.equal(2)",
            "err": {},
            "isRoot": false,
            "uuid": "b79f7eb8-2bf9-4fe7-8e7e-3ab1b87771c7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "loads the same instance",
            "fullTitle": "service locator tests loads the same instance",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const service1 = await sl.load('service')\nexpect(service1.foo).to.be.equal(1)\nconst service2 = await sl.load('service')\nexpect(service2.foo).to.be.equal(2)",
            "err": {},
            "isRoot": false,
            "uuid": "e82aa4df-3a44-4431-9305-70a5027d4572",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "throws an exception if the service has not been defined",
            "fullTitle": "service locator tests throws an exception if the service has not been defined",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "sl.load('none existing service')\n.then((service) => done(new Error('should not have loaded a service')))\n.catch((error)  =>\n{\n  expect(error.code).to.be.equal('ERR_SERVICE_FACTORY_UNDEFINED')\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "80cf8e3f-3b42-4287-b59b-16ba8e1456c3",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b79f7eb8-2bf9-4fe7-8e7e-3ab1b87771c7",
          "e82aa4df-3a44-4431-9305-70a5027d4572",
          "80cf8e3f-3b42-4287-b59b-16ba8e1456c3"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a53a944a-6679-402b-bff4-f54bb27cfc89",
        "title": "controller/server/http",
        "fullFile": "/home/erik/Projects/@superhero/js.core/test/http.test.js",
        "file": "/test/http.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "controller/server/http \"before all\" hook",
            "timedOut": false,
            "duration": 10,
            "pass": false,
            "fail": false,
            "pending": false,
            "context": "{\n  \"title\": \"config\",\n  \"value\": {\n    \"routes\": [\n      {\n        \"chain\": [\n          \"controller/middleware-1\",\n          \"controller/middleware-2\"\n        ]\n      },\n      {\n        \"endpoint\": \"../controller/dispatcher/rest\",\n        \"policy\": \"/rest\"\n      },\n      {\n        \"view\": \"raw\",\n        \"endpoint\": \"controller/txt\",\n        \"policy\": \"/test-raw\"\n      },\n      {\n        \"view\": \"json\",\n        \"endpoint\": \"controller/obj\",\n        \"policy\": \"/test-json\"\n      },\n      {\n        \"endpoint\": \"controller/failing\",\n        \"policy\": \"/test-failing\"\n      },\n      {\n        \"endpoint\": \"controller/501\",\n        \"policy\": \"/test-501\"\n      }\n    ]\n  }\n}",
            "code": "const\nRequest = require('@superhero/request'),\nport    = 9001\ncontext(this, { title:'config', value:config })\nrequest = new Request({ url:'http://localhost:' + port })\nserver  = require('../').server('http', config.routes)\nserver.on('listening', () => done())\nserver.listen(port)",
            "err": {},
            "isRoot": false,
            "uuid": "3788766e-9b1e-464f-b62e-dd4f849033cb",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "controller/server/http \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "server.close()",
            "err": {},
            "isRoot": false,
            "uuid": "26e257a5-a18d-45c3-bfcb-46f5b5d7bc27",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "testing the rest dispatcher",
            "fullTitle": "controller/server/http testing the rest dispatcher",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result =\n{\n  get     : await request.get('/rest'),\n  post    : await request.post('/rest'),\n  put     : await request.put('/rest'),\n  delete  : await request.delete('/rest')\n}\nexpect(result.get.status).to.be.equal(501)\nexpect(result.post.status).to.be.equal(501)\nexpect(result.put.status).to.be.equal(501)\nexpect(result.delete.status).to.be.equal(501)",
            "err": {},
            "isRoot": false,
            "uuid": "9ab0b084-49e7-4716-b535-7b37d08a8b7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a raw text response",
            "fullTitle": "controller/server/http a raw text response",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-raw')\nexpect(result.status).to.be.equal(200)\nexpect(result.data).to.be.equal('txt')",
            "err": {},
            "isRoot": false,
            "uuid": "118bcf2f-5ea8-4da9-acee-34e13326e055",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a json response",
            "fullTitle": "controller/server/http a json response",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-json')\nexpect(result.status).to.be.equal(200)\nexpect(result.data.foobar).to.be.equal('bazqux')",
            "err": {},
            "isRoot": false,
            "uuid": "09353fef-63cd-463e-93be-af3d5b973e4f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a none specified endpoint should respond with a status:\"501\"",
            "fullTitle": "controller/server/http a none specified endpoint should respond with a status:\"501\"",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-501')\nexpect(result.status).to.be.equal(501)\nexpect(result.data).to.be.equal('Not Implemented')",
            "err": {},
            "isRoot": false,
            "uuid": "64cb25b9-b709-47c8-bedc-ad0a6e31694f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a failing dispatcher",
            "fullTitle": "controller/server/http a failing dispatcher",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/test-failing')\nexpect(result.status).to.be.equal(500)\nexpect(result.data).to.be.equal('Internal Server Error')",
            "err": {},
            "isRoot": false,
            "uuid": "f064e780-3173-461e-8ac5-ad408fe48728",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "a none specified route returns a 404",
            "fullTitle": "controller/server/http a none specified route returns a 404",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = await request.get('/none-existing-path')\nexpect(result.status).to.be.equal(404)\nexpect(result.data).to.be.equal('Not Found')",
            "err": {},
            "isRoot": false,
            "uuid": "15be39a8-f8ba-4133-8558-619a50472639",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "9ab0b084-49e7-4716-b535-7b37d08a8b7b",
          "118bcf2f-5ea8-4da9-acee-34e13326e055",
          "09353fef-63cd-463e-93be-af3d5b973e4f",
          "64cb25b9-b709-47c8-bedc-ad0a6e31694f",
          "f064e780-3173-461e-8ac5-ad408fe48728",
          "15be39a8-f8ba-4133-8558-619a50472639"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 28,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1713f526-a410-46cf-8fc3-311041ae6816",
        "title": "view/json",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/json.test.js",
        "file": "/view/json.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "view/json \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Json = require('./json')\njson = new Json()",
            "err": {},
            "isRoot": false,
            "uuid": "d779d168-4945-4de3-8376-be863d331364",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f3117675-8d96-4036-8cac-48c2a596d0bd",
            "title": "compose(vm)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/view/json.test.js",
            "file": "/view/json.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a stringified value of `vm.body`",
                "fullTitle": "view/json compose(vm) should return a stringified value of `vm.body`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"view model\",\n  \"value\": {\n    \"body\": {\n      \"foo\": \"bar\"\n    },\n    \"headers\": {\n      \"content-type\": \"application/json\"\n    }\n  }\n}",
                "code": "context(this, { title:'view model', value:vm })\nexpect(json.compose(vm)).to.be.equal(JSON.stringify(vm.body))",
                "err": {},
                "isRoot": false,
                "uuid": "11492711-5ed3-4753-8dac-73e1504d8735",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set the `vm.headers[\"content-type\"]` to \"application/json\"",
                "fullTitle": "view/json compose(vm) should set the `vm.headers[\"content-type\"]` to \"application/json\"",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"view model\",\n  \"value\": {\n    \"body\": {\n      \"foo\": \"bar\"\n    },\n    \"headers\": {\n      \"content-type\": \"application/json\"\n    }\n  }\n}",
                "code": "context(this, { title:'view model', value:vm })\nexpect(vm.headers['content-type']).to.be.equal('application/json')",
                "err": {},
                "isRoot": false,
                "uuid": "550f0fba-62a3-4c44-aeaa-29534b96f151",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "expected a stringified version of the `vm.body`",
                "fullTitle": "view/json compose(vm) expected a stringified version of the `vm.body`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"view model\",\n  \"value\": {\n    \"body\": {\n      \"foo\": \"bar\"\n    },\n    \"headers\": {\n      \"content-type\": \"application/json\"\n    }\n  }\n}",
                "code": "context(this, { title:'view model', value:vm })\nexpect(json.compose(vm)).to.be.equal(JSON.stringify(vm.body))",
                "err": {},
                "isRoot": false,
                "uuid": "bae6ada5-fc43-4f2a-9349-2431aff2702b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "11492711-5ed3-4753-8dac-73e1504d8735",
              "550f0fba-62a3-4c44-aeaa-29534b96f151",
              "bae6ada5-fc43-4f2a-9349-2431aff2702b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "415daa3c-95ff-4a6d-aa83-926bc12f25bd",
        "title": "view/raw",
        "fullFile": "/home/erik/Projects/@superhero/js.core/view/raw.test.js",
        "file": "/view/raw.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "view/raw \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Raw = require('./raw')\nraw = new Raw()",
            "err": {},
            "isRoot": false,
            "uuid": "e3bad209-3616-4caf-941b-76c90836fc56",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "94ec8d33-6f49-4195-bfce-3a2d90c5e939",
            "title": "compose(vm)",
            "fullFile": "/home/erik/Projects/@superhero/js.core/view/raw.test.js",
            "file": "/view/raw.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the value of `vm.body`",
                "fullTitle": "view/raw compose(vm) should return the value of `vm.body`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "{\n  \"title\": \"view model\",\n  \"value\": {\n    \"body\": \"foobar\"\n  }\n}",
                "code": "context(this, { title:'view model', value:vm })\nexpect(raw.compose(vm)).to.be.equal(vm.body)",
                "err": {},
                "isRoot": false,
                "uuid": "c6e5b71b-31df-43c0-9f84-24d840b1ecdf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c6e5b71b-31df-43c0-9f84-24d840b1ecdf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}